UPDATE DATABASE "?"

ADD TABLE "rvc_configuration_type"
  AREA "Schema Area"
  DESCRIPTION "This defines the types of data item which require version control.  Each type should correspond to a single database table.  Any alteration to this table or its direct children will be versioned, and require the item to be checked out.  This is achieved by having suitable REPLICATION triggers on all involved tables.

e.g. ryc_smartobject (and it's related tables: ryc_page, ryc_smartlink, etc.).

In this case the SmartObject is a configuration type.  Any changes to records in ryv_smartobject, ryc_page etc.  will result in a new version of that smartobject.  

The log records maintained are sensitive to schema changes in any of the invoved tables.  Utilities will be provided for restructuring these log entries in the event that version recovery is desired across schema changes.

Fields exist in this table for integration with a SCM tool, e.g. Roundtable. They identify the identifying field in the table that maps to the object name in the SCM tool. They then identify which fields form the primary key to enable a simple cross reference between the SCM object and the primary key of the data. For example, in the ryc_smartbject table, the identify field would be object_filename and the primary key fields would be smartobject_obj. This means that we could find a smartobject record using the object filename and get the smartobject object number."
  DUMP-NAME "rvcct"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvccttrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvccttrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvccttrigw.p" CRC "?" 

ADD FIELD "configuration_type" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 2
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 10

ADD FIELD "type_table_name" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is the actual name of the table for the data represented by this configuration type."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Type Table Name"
  POSITION 3
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Type table name"
  ORDER 20

ADD FIELD "type_description" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is a description of the data being represented by this configuration type."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Type Description"
  POSITION 4
  SQL-WIDTH 70
  VALMSG "s_description"
  HELP "Type description"
  ORDER 30

ADD FIELD "type_locked" OF "rvc_configuration_type" AS logical 
  DESCRIPTION "If set to YES then this prevents items of this type from being checked out, modified, or checked back in."
  FORMAT "YES/NO"
  INITIAL "NO"
  LABEL "Type Locked"
  POSITION 5
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_noyes"
  HELP "Type locked"
  ORDER 40

ADD FIELD "type_deployable" OF "rvc_configuration_type" AS logical 
  DESCRIPTION "If set to NO, then data of this type is not included in deployments to the customer site.  e.g. Data which represents utilities for use in house only.

If the type is deployable, then individual items may still be excluded from the deployment by setting their item_deployable fields to NO.

If the type is not deployable then the item_deployable flag is ignored."
  FORMAT "YES/NO"
  INITIAL "YES"
  LABEL "Type Deployable"
  POSITION 6
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_yesno"
  HELP "Type deployable"
  ORDER 50

ADD FIELD "baseline_frequency" OF "rvc_configuration_type" AS integer 
  DESCRIPTION "This is the number of new versions which may occur between baselines, after which a new baseline will be created automatically.

Usually baselines are set at developer discression, but this prevents it from being left too long.

A value of zero disables this feature."
  FORMAT "->9"
  INITIAL "0"
  LABEL "Baseline Frequency"
  POSITION 7
  SQL-WIDTH 4
  VALMSG "n_integer_2"
  HELP "Baseline frequency"
  ORDER 60

ADD FIELD "configuration_type_obj" OF "rvc_configuration_type" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Configuration Type Obj"
  POSITION 8
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Configuration type obj"
  DECIMALS 6
  ORDER 130

ADD FIELD "scm_code" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is the default object sybtype to use when creating objects automatically into the SCM tool repository, e.g. for a configuration type of RYCSO for ryc_smartobject, this would be set to LSmartObject identifying the object created as a logical smartobject.

This code does not mean that every smartobject is of this type however, it is only used for the creation of objects in the SCM tool.
"
  FORMAT "X(15)"
  INITIAL ""
  LABEL "Scm Code"
  POSITION 9
  SQL-WIDTH 30
  VALMSG "s_reference"
  HELP "Scm code"
  ORDER 70

ADD FIELD "description_fieldname" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is the fieldname for this configuration type that is used to describe an item of data in the table, e.g. for this table it would be type_description.

This information is used when wrting generic objects to determine what information to display about an item of data, e.g. for a window title.

"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Description Fieldname"
  POSITION 10
  SQL-WIDTH 70
  VALMSG "s_description"
  HELP "Description fieldname"
  ORDER 100

ADD FIELD "scm_identifying_fieldname" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This field identifies the single field in the table referenced by this configuration type that maps to the object name in the SCM tool, e.g. for the table ryc_smartobject this would be object_filename.

These fields therefore enable us to dynamically map a particular object in the SCM tool with a configuration item in the Astra Versioning System.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Identifying Fieldname"
  POSITION 11
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm identifying fieldname"
  ORDER 80

ADD FIELD "scm_primary_key_fields" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is a comma seperated list of the primary key fields for this configuration type.

Related tables will only refer to the primary key of the primary table. We need this information to first find the primary table, then work out what the identifying fieldname is to find the configuration item.

For the table ryc_smartobject, the identifying_field would be the object_filename and the primary key fields would be the smartobject_obj.


These fields therefore enable us to dynamically map a particular object in the SCM tool with a configuration item in the Astra Versioning System.

"
  FORMAT "X(70)"
  INITIAL ""
  LABEL "Scm Primary Key Fields"
  POSITION 12
  SQL-WIDTH 140
  VALMSG "s_big_name"
  HELP "Scm primary key fields"
  ORDER 90

ADD FIELD "product_module_obj" OF "rvc_configuration_type" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 13
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 110

ADD FIELD "product_module_fieldname" OF "rvc_configuration_type" AS character 
  DESCRIPTION "This is the fieldname for this configuration type that is used to identify the product module, e.g. product_module_obj.

This is only required if it is possible to obtain a product module from this type of data.

The configuration type also contains an optional default product module to use when cretaing data of this type.

At least one of the fields, the default product module or the product module fieldname must be specified as it is mandatory for new items of data to be allocated to a product module.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Product Module Fieldname"
  POSITION 14
  SQL-WIDTH 70
  VALMSG "s_description"
  HELP "Product module fieldname"
  ORDER 120

ADD INDEX "XPKrvc_configuration_type" ON "rvc_configuration_type" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "configuration_type" ASCENDING 

ADD INDEX "XAK1rvc_configuration_type" ON "rvc_configuration_type" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "type_table_name" ASCENDING 

ADD INDEX "XAK2rvc_configuration_type" ON "rvc_configuration_type" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_type_obj" ASCENDING 

ADD INDEX "XIE1rvc_configuration_type" ON "rvc_configuration_type" 
  AREA "Schema Area"
  INDEX-FIELD "type_description" ASCENDING 

ADD TABLE "rvm_configuration_item"
  AREA "Schema Area"
  DESCRIPTION "This is a particular item of data under version control e.g. a particular smartobject. 

Configuration items must belong to a product module.  The configuration type dictates the type of data, and the object name represents the identifying field of the record in the table - also as used for the object name in the SCM tool.
"
  DUMP-NAME "rvmci"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvmcitrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvmcitrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvmcitrigw.p" CRC "?" 

ADD FIELD "configuration_type" OF "rvm_configuration_item" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 2
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 10

ADD FIELD "product_module_obj" OF "rvm_configuration_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 3
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 30

ADD FIELD "item_deployable" OF "rvm_configuration_item" AS logical 
  DESCRIPTION "If set to NO, then this configuration item is not included in deployments to the customer site.  e.g. Data which represents utilities for use in house only."
  FORMAT "YES/NO"
  INITIAL "YES"
  LABEL "Item Deployable"
  POSITION 4
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_yesno"
  HELP "Item deployable"
  ORDER 40

ADD FIELD "scm_registered" OF "rvm_configuration_item" AS logical 
  DESCRIPTION "When a configuration item is first created via the replication triggers associated with the type of data, the item will be flagged as scm_registered = NO indicating that the object has not been created in any software configuration management tool.

The SCM tool is then responsible (maybe as part of task completion) for creating unregistered items in its own repository and then setting this flag to YES.
"
  FORMAT "YES/NO"
  INITIAL "NO"
  LABEL "Scm Registered"
  POSITION 5
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_noyes"
  HELP "Scm registered"
  ORDER 50

ADD FIELD "scm_object_name" OF "rvm_configuration_item" AS character 
  DESCRIPTION "The name of the configuration item as used in the software configuration management tool. This is also used to ensure a configuration item does not already exist in the SCM tool.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Object Name"
  POSITION 6
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm object name"
  ORDER 20

ADD FIELD "configuration_item_obj" OF "rvm_configuration_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Configuration Item Obj"
  POSITION 7
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Configuration item obj"
  DECIMALS 6
  ORDER 60

ADD INDEX "XPKrvm_configuration_item" ON "rvm_configuration_item" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD INDEX "XAK1rvm_configuration_item" ON "rvm_configuration_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_item_obj" ASCENDING 

ADD INDEX "XAK2rvm_configuration_item" ON "rvm_configuration_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 

ADD INDEX "XAK3rvm_configuration_item" ON "rvm_configuration_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD TABLE "rvm_workspace"
  AREA "Schema Area"
  DESCRIPTION "This is the definition of a workspace, which is a specific configuration of item versions (in this case the items represent data).  Item versions exist outside the context of a workspace.  Workspaces are used to control the various stages of the development process, typically including Development, Test and Deployment areas.  They also exist to manage customer-specific configurations (e.g. what specific products and versions thereof a customer is running).  

If a workspace becomes obsolete then it can be deleted.  This does not delete the items or their versions, but merely the record of what versions were in the particular workspace.

If using Roundtable, these workspaces should correspond to those in Roundtable itself.

It is possible to check out an entire workspace if desired.

In the first version of the Versioning system we are going to be heavilly dependant on Roundtable integration.  Smartobject records correspond to logical gsc_object records which are actually checked out in roundtable  We will not initially support versioning of orther configuration types.
"
  DUMP-NAME "rvmws"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvmwstrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvmwstrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvmwstrigw.p" CRC "?" 

ADD FIELD "workspace_obj" OF "rvm_workspace" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "workspace_code" OF "rvm_workspace" AS character 
  DESCRIPTION "This is a unique code with which to identify the workspace"
  FORMAT "X(10)"
  INITIAL ""
  LABEL "Workspace Code"
  POSITION 3
  SQL-WIDTH 20
  VALMSG "s_code"
  HELP "Workspace code"
  ORDER 20

ADD FIELD "workspace_description" OF "rvm_workspace" AS character 
  DESCRIPTION "Full description of the workspace"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Workspace Description"
  POSITION 4
  SQL-WIDTH 70
  VALMSG "s_description"
  HELP "Workspace description"
  ORDER 30

ADD FIELD "workspace_locked" OF "rvm_workspace" AS logical 
  DESCRIPTION "This indicates whether the workspace is locked.  If YES, then no items can be checked out from , saved in, or checled back into that workspace.

The purpose is to prevent the contents of a workspace changing during administrative processes (e.g. building, imports etc.).

"
  FORMAT "YES/NO"
  INITIAL "NO"
  LABEL "Workspace Locked"
  POSITION 5
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_noyes"
  HELP "Workspace locked"
  ORDER 40

ADD FIELD "data_version_table" OF "rvm_workspace" AS character 
  DESCRIPTION "This is the name of a table which will be used to record the current version stamp data at deployment time.  Thus the version numbers of all items will be available at runtime.  Note that these version numbers will not be updated if the data is changed after deployment (i.e. outside the context of the versioning system).

As soon as data is chaned under a task the version information in this table will be updated.  This happens in advance of the item being checked back in.  Thus the version information always represents the current version existing in the workspace.

In Astra, the data_version_table is ""rym_data_version""."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Data Version Table"
  POSITION 6
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Data version table"
  ORDER 50

ADD INDEX "XPKrvm_workspace" ON "rvm_workspace" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "workspace_obj" ASCENDING 

ADD INDEX "XAK1rvm_workspace" ON "rvm_workspace" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_code" ASCENDING 

ADD INDEX "XIE1rvm_workspace" ON "rvm_workspace" 
  AREA "Schema Area"
  INDEX-FIELD "workspace_description" ASCENDING 

ADD TABLE "rvm_workspace_item"
  AREA "Schema Area"
  DESCRIPTION "This table defines which item versions exist in a specific workspace.

Where an item is being worked on in the workspace, this table will record both the current version number and the wip version number.  The wip version is available in the database, but may not be checked back in, in which case the wip version recorded here will revert to the current version.

The wip version number will only contain a value whilst the workspace item is checked out under a task, otherwise it will be 0.

When moving items between workspaces, only the item version number will be used. A modification must be completed (checked in) before it can progress to any other workspace."
  DUMP-NAME "rvmwi"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvmwitrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvmwitrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvmwitrigw.p" CRC "?" 

ADD FIELD "workspace_item_obj" OF "rvm_workspace_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Item Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace item obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "workspace_obj" OF "rvm_workspace_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Obj"
  POSITION 3
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace obj"
  DECIMALS 6
  ORDER 20

ADD FIELD "configuration_type" OF "rvm_workspace_item" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 4
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 30

ADD FIELD "scm_object_name" OF "rvm_workspace_item" AS character 
  DESCRIPTION "The name of the configuration item as used in the software configuration management tool. This is also used to ensure a configuration item does not already exist in the SCM tool.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Object Name"
  POSITION 5
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm object name"
  ORDER 40

ADD FIELD "product_module_obj" OF "rvm_workspace_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 6
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 50

ADD FIELD "item_version_number" OF "rvm_workspace_item" AS integer 
  DESCRIPTION "This is the version number for this item version.

The modification type for a task indicates how the version number will be incremented.  The version number is a six-digit number made up of three two-digit components, e.g. VVRRPP.  The component whose value is incremented corresponds to the indicated modification type.

Version numbers are not incremented on check-out.  They are altered when a checked-out item is first altered.  The version number is only incremented once during a single checkout.

Note:  The verion number on this record is never incremented per se, but a new version is created with the incremented version number."
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Item Version Number"
  POSITION 7
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Item version number"
  ORDER 60

ADD FIELD "task_version_number" OF "rvm_workspace_item" AS integer 
  DESCRIPTION "This is the version number for this item version.

The modification type for a task indicates how the version number will be incremented.  The version number is a six-digit number made up of three two-digit components, e.g. VVRRPP.  The component whose value is incremented corresponds to the indicated modification type.

Version numbers are not incremented on check-out.  They are altered when a checked-out item is first altered.  The version number is only incremented once during a single checkout.

Note:  The verion number on this record is never incremented per se, but a new version is created with the incremented version number."
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Task Version Number"
  POSITION 8
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Task version number"
  ORDER 80

ADD FIELD "task_product_module_obj" OF "rvm_workspace_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Task Product Module Obj"
  POSITION 9
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Task product module obj"
  DECIMALS 6
  ORDER 70

ADD INDEX "XPKrvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "workspace_item_obj" ASCENDING 

ADD INDEX "XAK1rvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 

ADD INDEX "XAK3rvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "item_version_number" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 

ADD INDEX "XAK4rvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "task_version_number" ASCENDING 
  INDEX-FIELD "task_product_module_obj" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 

ADD INDEX "XIE1rvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD INDEX "XIE2rvm_workspace_item" ON "rvm_workspace_item" 
  AREA "Schema Area"
  INDEX-FIELD "task_product_module_obj" ASCENDING 

ADD TABLE "rvm_workspace_module"
  AREA "Schema Area"
  DESCRIPTION "This table defines the product modules that belong to a particular workspace, and whether the product module is primary or sourced from a different workspace.

If a product module is primary to this workspace then the data versions should ordinarily be modified within this workspace.  If the product module is not primary, then the data versions should ordinarily be modified in their source workspace and imported into this workspace.  These rules may not be rigorously enforced.

"
  DUMP-NAME "rvmwm"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvmwmtrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvmwmtrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvmwmtrigw.p" CRC "?" 

ADD FIELD "workspace_module_obj" OF "rvm_workspace_module" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Module Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace module obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "workspace_obj" OF "rvm_workspace_module" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Obj"
  POSITION 3
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace obj"
  DECIMALS 6
  ORDER 20

ADD FIELD "product_module_obj" OF "rvm_workspace_module" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 4
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 30

ADD FIELD "source_workspace_obj" OF "rvm_workspace_module" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Source Workspace Obj"
  POSITION 5
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Source workspace obj"
  DECIMALS 6
  ORDER 40

ADD FIELD "include_in_import" OF "rvm_workspace_module" AS logical 
  DESCRIPTION "This flag is ignored if the product module is primary to this workspace.

However, if the source workspace is different, it indicates whether to include the product module in the import process.  Ordinarily it would be set to YES.  However it may be set NO to prevent incomplete configurations from being imported."
  FORMAT "YES/NO"
  INITIAL "YES"
  LABEL "Include in Import"
  POSITION 6
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_yesno"
  HELP "Include in import"
  ORDER 50

ADD INDEX "XPKrvm_workspace_module" ON "rvm_workspace_module" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "workspace_module_obj" ASCENDING 

ADD INDEX "XAK1rvm_workspace_module" ON "rvm_workspace_module" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD INDEX "XAK2rvm_workspace_module" ON "rvm_workspace_module" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 

ADD INDEX "XIE1rvm_workspace_module" ON "rvm_workspace_module" 
  AREA "Schema Area"
  INDEX-FIELD "source_workspace_obj" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 

ADD TABLE "rvt_action"
  AREA "Schema Area"
  DESCRIPTION "This table contains entries for every action (CREATE, WRITE, DELETE) for all involved tables in the database.  Actions form parts of a transaction, which must be assigned to a task.

The information stored in the action table is sufficient to replay that action at some later stage: The name of the table, the action, and the raw-transfer data representing the action.

Action entries rely on a raw-transfer operation for the efficient construction of data.  This is sensitive to schema changes in the involved tables.  Utilities will be provided to restructure log entries when version recovery is required across schema changes.
"
  DUMP-NAME "rvtac"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvtactrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvtactrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvtactrigw.p" CRC "?" 

ADD FIELD "action_obj" OF "rvt_action" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Action Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Action obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "task_number" OF "rvt_action" AS integer 
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Task Number"
  POSITION 3
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Task number"
  ORDER 20

ADD FIELD "transaction_id" OF "rvt_action" AS integer 
  DESCRIPTION "The transaction_id field is used to group raw-transfer operations which must occur within the same physical transaction.  

We assume that the transaction_id is an ascending sequence, and that groups of actions should be performed in this sequence.  Within the sequence, all actions with the same transaction_id form part of the same physical transaction.  Experience will dictate whether this sequencing is valid.

We can safely assume that a transaction_id will be unique within a task.
"
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Transaction Id"
  POSITION 4
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Transaction id"
  ORDER 30

ADD FIELD "table_name" OF "rvt_action" AS character 
  DESCRIPTION "This is the name of the database table in which the action took place."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Table Name"
  POSITION 5
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Table name"
  ORDER 50

ADD FIELD "raw_data" OF "rvt_action" AS raw 
  DESCRIPTION "This is the raw-transfer data describing the action, from which that action can be reproduced."
  FORMAT "x(8)"
  INITIAL ""
  LABEL "Raw Data"
  POSITION 6
  SQL-WIDTH 16
  VALMSG "r_raw"
  HELP "Raw data"
  ORDER 60

ADD FIELD "event_name" OF "rvt_action" AS character 
  DESCRIPTION "This is the name of the database event which gave rise to this particular action record.

e.g. CREATE DELETE WRITE."
  FORMAT "X(15)"
  INITIAL ""
  LABEL "Event Name"
  POSITION 7
  SQL-WIDTH 30
  VALMSG "s_short_name"
  HELP "Event name"
  ORDER 40

ADD FIELD "primary_key_fields" OF "rvt_action" AS character 
  DESCRIPTION "This is a comma seperated list of primary key fields, that corresponds to the primary key values field for the table name.
This is used for deletes to locate the item of data to delete."
  FORMAT "X(70)"
  INITIAL ""
  LABEL "Primary Key Fields"
  POSITION 8
  SQL-WIDTH 140
  VALMSG "s_big_description"
  HELP "Primary key fields"
  ORDER 70

ADD FIELD "primary_key_values" OF "rvt_action" AS character 
  DESCRIPTION "This is a chr(3) seperated list of primary key field values, that corresponds to the primary key fields field for the table name.
This is used for deletes to locate the item of data to delete."
  FORMAT "X(70)"
  INITIAL ""
  LABEL "Primary Key Values"
  POSITION 9
  SQL-WIDTH 140
  VALMSG "s_big_description"
  HELP "Primary key values"
  ORDER 80

ADD INDEX "XPKrvt_action" ON "rvt_action" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "action_obj" ASCENDING 

ADD INDEX "XAK1rvt_action" ON "rvt_action" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "transaction_id" ASCENDING 
  INDEX-FIELD "action_obj" ASCENDING 

ADD TABLE "rvt_action_underway"
  AREA "Schema Area"
  DESCRIPTION "This table will only contain records during a  transaction for some acrtion, e.g. deletion, assignment, etc. Its purpose is to make primary table information available to involved tables during the operation, e.g. cascade deletion, object assignment, etc.

The problem is that during a deletion of the primary table, the involved tables replication triggers can not access the primary table anymore, as it has been deleted.

To resolve this issue, we will create a record in this table at the top of the delete trigger of a primary table, and subsequently delete the record at the end of the primary table replication delete trigger. This means the information will be available throughout the entire delete transaction.

For the assignment of data between repositories via the versioning system, we need to know we are doing the assignment and ensure we do not fire off replication code to create transaction and action records, as it is simply moving existing versions of data rather than changing data.

Under normal cicumstances (no active transaction), this table will be empty."
  DUMP-NAME "rvtau"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvtautrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvtautrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvtautrigw.p" CRC "?" 

ADD FIELD "action_table_fla" OF "rvt_action_underway" AS character 
  DESCRIPTION "The FLA of the table whose data is being actioned, e.g. deleted or assigned.
"
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Action Table Fla"
  POSITION 2
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Action table fla"
  ORDER 20

ADD FIELD "action_type" OF "rvt_action_underway" AS character 
  DESCRIPTION "The type of action, e.g.:

DEL = Deletion
ASS = Assignment of new data"
  FORMAT "X(3)"
  INITIAL ""
  LABEL "Action Type"
  POSITION 3
  SQL-WIDTH 6
  VALMSG "s_tla"
  HELP "Action type"
  ORDER 10

ADD FIELD "action_primary_key" OF "rvt_action_underway" AS character 
  DESCRIPTION "A chr(3) delimited list of primary key field values to identify the record being actioned. The field values correspond to the primary key fields specified in the rvc_configuration_type table.

This field is only required for deletions. For other things such as assigns, just the scm object name will be used with the table FLA to locate this record.
"
  FORMAT "X(70)"
  INITIAL ""
  LABEL "Action Primary Key"
  POSITION 4
  SQL-WIDTH 140
  VALMSG "s_big_description"
  HELP "Action primary key"
  ORDER 30

ADD FIELD "action_scm_object_name" OF "rvt_action_underway" AS character 
  DESCRIPTION "The object name of the data item being actioned as referenced in the SCM tool."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Action Scm Object Name"
  POSITION 5
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Action scm object name"
  ORDER 40

ADD FIELD "action_underway_obj" OF "rvt_action_underway" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Action Underway Obj"
  POSITION 6
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Action underway obj"
  DECIMALS 6
  ORDER 50

ADD INDEX "XPKrvt_action_underway" ON "rvt_action_underway" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "action_type" ASCENDING 
  INDEX-FIELD "action_table_fla" ASCENDING 
  INDEX-FIELD "action_primary_key" ASCENDING 
  INDEX-FIELD "action_scm_object_name" ASCENDING 

ADD INDEX "XIE1rvt_action_underway" ON "rvt_action_underway" 
  AREA "Schema Area"
  INDEX-FIELD "action_underway_obj" ASCENDING 

ADD TABLE "rvt_deleted_item"
  AREA "Schema Area"
  DESCRIPTION "This table records items that were deleted from a workspace in the context of a task. Only registered items that are deleted from a workspace need to be recorded in this table.

The purpose of this table is to provide the SCM tool with the information required to delete its corresponding item from its repository, probably as part of some task completion process.

The SCM tool should remove this record once it has actioned the deletion in its own repository.
"
  DUMP-NAME "rvtdi"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvtditrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvtditrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvtditrigw.p" CRC "?" 

ADD FIELD "deleted_item_obj" OF "rvt_deleted_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Deleted Item Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Deleted item obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "workspace_obj" OF "rvt_deleted_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Obj"
  POSITION 3
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace obj"
  DECIMALS 6
  ORDER 20

ADD FIELD "task_number" OF "rvt_deleted_item" AS integer 
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Task Number"
  POSITION 4
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Task number"
  ORDER 30

ADD FIELD "configuration_type" OF "rvt_deleted_item" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 5
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 40

ADD FIELD "scm_object_name" OF "rvt_deleted_item" AS character 
  DESCRIPTION "The name of the configuration item as used in the software configuration management tool. This is also used to ensure a configuration item does not already exist in the SCM tool.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Object Name"
  POSITION 6
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm object name"
  ORDER 50

ADD FIELD "product_module_obj" OF "rvt_deleted_item" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 7
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 60

ADD INDEX "XPKrvt_deleted_item" ON "rvt_deleted_item" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "deleted_item_obj" ASCENDING 

ADD INDEX "XAK1rvt_deleted_item" ON "rvt_deleted_item" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD INDEX "XIE1rvt_deleted_item" ON "rvt_deleted_item" 
  AREA "Schema Area"
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD TABLE "rvt_item_version"
  AREA "Schema Area"
  DESCRIPTION "This represents a single version of a configuration item.  At least one version must exist for the item.

New versions are not created when an item is checked out, but only when an item that has been checked out is first modified.

Once a version has been checked in it may not be deleted.  We may provide archiving facilities, but in principle the item version still exists.





"
  DUMP-NAME "rvtiv"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvtivtrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvtivtrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvtivtrigw.p" CRC "?" 

ADD FIELD "configuration_type" OF "rvt_item_version" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 2
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 10

ADD FIELD "scm_object_name" OF "rvt_item_version" AS character 
  DESCRIPTION "The name of the configuration item as used in the software configuration management tool. This is also used to ensure a configuration item does not already exist in the SCM tool.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Object Name"
  POSITION 3
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm object name"
  ORDER 20

ADD FIELD "item_version_number" OF "rvt_item_version" AS integer 
  DESCRIPTION "This is the version number for this item version.

The modification type for a task indicates how the version number will be incremented.  The version number is a six-digit number made up of three two-digit components, e.g. VVRRPP.  The component whose value is incremented corresponds to the indicated modification type.

Version numbers are not incremented on check-out.  They are altered when a checked-out item is first altered.  The version number is only incremented once during a single checkout.

Note:  The verion number on this record is never incremented per se, but a new version is created with the incremented version number."
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Item Version Number"
  POSITION 4
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Item version number"
  ORDER 40

ADD FIELD "product_module_obj" OF "rvt_item_version" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 5
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 30

ADD FIELD "task_number" OF "rvt_item_version" AS integer 
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Task Number"
  POSITION 6
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Task number"
  ORDER 50

ADD FIELD "baseline_version" OF "rvt_item_version" AS logical 
  DESCRIPTION "If set to YES, indicates that the log enties for constructing this data item do not rely on the pre existence of an earlier version of this item in the database.

The first version of an item will always be a baseline version.  The subsequent creation of baseline versions is at developer discression.  Setting baseline versions improves the performance of data item construction, and facilitates the archiving of ealier versions.  However each time an item is baselined this results in additional data being stored in the log table.

The setting of a new baseline version is automated based on the baseline frequency stored in the configuration type table.
"
  FORMAT "YES/NO"
  INITIAL "NO"
  LABEL "Baseline Version"
  POSITION 7
  SQL-WIDTH 1
  VIEW-AS "VIEW-AS TOGGLE-BOX"
  VALMSG "l_noyes"
  HELP "Baseline version"
  ORDER 60

ADD FIELD "previous_version_number" OF "rvt_item_version" AS integer 
  DESCRIPTION "This is the version of the item from which this version was created.

If baseline = NO, then this is the version of this item to which log entries are applied in order to reconstitute the current version.


"
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Previous Version Number"
  POSITION 8
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Previous version number"
  ORDER 80

ADD FIELD "baseline_version_number" OF "rvt_item_version" AS integer 
  DESCRIPTION "This is the version number for the baseline version from which this item version must be constructed.

In the case that this is indeed a baseline (baseline_version = YES) the baseline_version_number will be 0.
"
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Baseline Version Number"
  POSITION 9
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Baseline version number"
  ORDER 100

ADD FIELD "previous_product_module_obj" OF "rvt_item_version" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Previous Product Module Obj"
  POSITION 10
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Previous product module obj"
  DECIMALS 6
  ORDER 70

ADD FIELD "item_description" OF "rvt_item_version" AS character 
  DESCRIPTION "This field is populated from the data table and describes this particular data item.  Once populated it can be changed in the version database, but might be reset by changes to the data item itself."
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Item Description"
  POSITION 11
  SQL-WIDTH 70
  VALMSG "s_description"
  HELP "Item description"
  ORDER 110

ADD FIELD "versions_since_baseline" OF "rvt_item_version" AS integer 
  DESCRIPTION "This is the number of new versions which have been created since the last baseline of this item.  If this number reaches that specified in the configuration type table, then a new baseline will be created automatically and this number reset to zero."
  FORMAT "->9"
  INITIAL "0"
  LABEL "Versions Since Baseline"
  POSITION 12
  SQL-WIDTH 4
  VALMSG "n_integer_2"
  HELP "Versions since baseline"
  ORDER 120

ADD FIELD "baseline_product_module_obj" OF "rvt_item_version" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Baseline Product Module Obj"
  POSITION 13
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Baseline product module obj"
  DECIMALS 6
  ORDER 90

ADD FIELD "item_version_obj" OF "rvt_item_version" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Item Version Obj"
  POSITION 14
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Item version obj"
  DECIMALS 6
  ORDER 130

ADD INDEX "XPKrvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "item_version_number" ASCENDING 

ADD INDEX "XAK1rvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "item_version_number" ASCENDING 

ADD INDEX "XIE1rvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "item_description" ASCENDING 

ADD INDEX "XIE2rvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "baseline_product_module_obj" ASCENDING 
  INDEX-FIELD "baseline_version_number" ASCENDING 

ADD INDEX "XIE3rvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "previous_product_module_obj" ASCENDING 
  INDEX-FIELD "previous_version_number" ASCENDING 

ADD INDEX "XIE4rvt_item_version" ON "rvt_item_version" 
  AREA "Schema Area"
  INDEX-FIELD "item_version_obj" ASCENDING 

ADD TABLE "rvt_transaction"
  AREA "Schema Area"
  DESCRIPTION "This table, in conjunction with rvt_action, contains the information required to construct an item version (including all related table information) from its previous version. The construcrtion of an item version may span multiple transactions.

This table defines all transactions that occur on involved tables in the database. Involved tables means the table being version controlled, plus all its related tables.

We assume in this model that a single transaction affects only a single item version within a single task. This means you cannot have a single transaction that would delete for example many records in a versioned table. Each deletion would need to occur in a seperate transaction. The reason for this is that a single transaction spanning multiple objects and versions would cause massive complexity in the roll forward behaviour.

We also assume that the transaction id is unique within a task. We do not assume it is unique universally (which it would not be).

The storing of the transaction id enables us to reproduce all updates performed in the context of a single transaction. When rolling forward the updates in a single transaction, we will disable all triggers, as the transaction will already include all updates that resulted from the initial firing of the triggers for related tables, e.g. cascade deletes, update of statistical information, etc.

Note: the update of statistical information on unrelated tables will not be performed automatically.

We assume that the transaction_id is in ascending sequence, and that groups of actions should be performed in this sequence.  Within the sequence, all actions with the same transaction_id form part of the same physical transaction.  Experience will dictate whether this sequencing is valid.

The deletion of an item of data in the primary table will not generate transaction and action records. The replication of this deletion between repositories will be handled by the SCM Tool (via import /assign hooks).
"
  DUMP-NAME "rvttr"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvttrtrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvttrtrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvttrtrigw.p" CRC "?" 

ADD FIELD "task_number" OF "rvt_transaction" AS integer 
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Task Number"
  POSITION 2
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Task number"
  ORDER 10

ADD FIELD "transaction_id" OF "rvt_transaction" AS integer 
  DESCRIPTION "The transaction_id field is used to group raw-transfer operations which must occur within the same physical transaction.  

We assume that the transaction_id is an ascending sequence, and that groups of actions should be performed in this sequence.  Within the sequence, all actions with the same transaction_id form part of the same physical transaction.  Experience will dictate whether this sequencing is valid.

We can safely assume that a transaction_id will be unique within a task.
"
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Transaction Id"
  POSITION 3
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Transaction id"
  ORDER 20

ADD FIELD "configuration_type" OF "rvt_transaction" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 4
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 40

ADD FIELD "product_module_obj" OF "rvt_transaction" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Product Module Obj"
  POSITION 5
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Product module obj"
  DECIMALS 6
  ORDER 30

ADD FIELD "scm_object_name" OF "rvt_transaction" AS character 
  DESCRIPTION "The name of the configuration item as used in the software configuration management tool. This is also used to ensure a configuration item does not already exist in the SCM tool.
"
  FORMAT "X(35)"
  INITIAL ""
  LABEL "Scm Object Name"
  POSITION 6
  SQL-WIDTH 70
  VALMSG "s_name"
  HELP "Scm object name"
  ORDER 50

ADD FIELD "item_version_number" OF "rvt_transaction" AS integer 
  DESCRIPTION "This is the version number for this item version.

The modification type for a task indicates how the version number will be incremented.  The version number is a six-digit number made up of three two-digit components, e.g. VVRRPP.  The component whose value is incremented corresponds to the indicated modification type.

Version numbers are not incremented on check-out.  They are altered when a checked-out item is first altered.  The version number is only incremented once during a single checkout.

Note:  The verion number on this record is never incremented per se, but a new version is created with the incremented version number."
  FORMAT "->>>>>9"
  INITIAL "0"
  LABEL "Item Version Number"
  POSITION 7
  SQL-WIDTH 4
  VALMSG "n_integer_6"
  HELP "Item version number"
  ORDER 60

ADD FIELD "transaction_obj" OF "rvt_transaction" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Transaction Obj"
  POSITION 8
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Transaction obj"
  DECIMALS 6
  ORDER 70

ADD INDEX "XPKrvt_transaction" ON "rvt_transaction" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "transaction_id" ASCENDING 

ADD INDEX "XAK1rvt_transaction" ON "rvt_transaction" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "transaction_id" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 
  INDEX-FIELD "item_version_number" ASCENDING 

ADD INDEX "XIE1rvt_transaction" ON "rvt_transaction" 
  AREA "Schema Area"
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "scm_object_name" ASCENDING 
  INDEX-FIELD "item_version_number" ASCENDING 
  INDEX-FIELD "transaction_id" ASCENDING 
  INDEX-FIELD "product_module_obj" ASCENDING 

ADD INDEX "XIE2rvt_transaction" ON "rvt_transaction" 
  AREA "Schema Area"
  INDEX-FIELD "transaction_obj" ASCENDING 

ADD TABLE "rvt_workspace_checkout"
  AREA "Schema Area"
  DESCRIPTION "This table defines the configuration items that are checked out in the various workspaces. When the item is checked back in, this record will be deleted.

A check_out record can be considered to be a licence to change the item and associated data. 

The checkout of an item should also create a new rtv_item_version record and assign that to be the task version for that item in the workspace."
  DUMP-NAME "rvtwc"
  TABLE-TRIGGER "CREATE" OVERRIDE PROCEDURE "rv/trg/rvtwctrigc.p" CRC "?" 
  TABLE-TRIGGER "DELETE" OVERRIDE PROCEDURE "rv/trg/rvtwctrigd.p" CRC "?" 
  TABLE-TRIGGER "WRITE" OVERRIDE PROCEDURE "rv/trg/rvtwctrigw.p" CRC "?" 

ADD FIELD "workspace_checkout_obj" OF "rvt_workspace_checkout" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Checkout Obj"
  POSITION 2
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace checkout obj"
  DECIMALS 6
  ORDER 10

ADD FIELD "workspace_obj" OF "rvt_workspace_checkout" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Obj"
  POSITION 3
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace obj"
  DECIMALS 6
  ORDER 20

ADD FIELD "task_number" OF "rvt_workspace_checkout" AS integer 
  FORMAT "->>>>>>>9"
  INITIAL "0"
  LABEL "Task Number"
  POSITION 4
  SQL-WIDTH 4
  VALMSG "n_integer_8"
  HELP "Task number"
  ORDER 30

ADD FIELD "configuration_type" OF "rvt_workspace_checkout" AS character 
  DESCRIPTION "This is the FLA of the table to which this configuration type relates.  e.g. RYCSO for ryc_smartobject."
  FORMAT "X(8)"
  INITIAL ""
  LABEL "Configuration Type"
  POSITION 5
  SQL-WIDTH 16
  VALMSG "s_entity_mnemonic"
  HELP "Configuration type"
  ORDER 40

ADD FIELD "workspace_item_obj" OF "rvt_workspace_checkout" AS decimal 
  FORMAT ">>>>>>>>>>>>>>>>>9.999999"
  INITIAL "0"
  LABEL "Workspace Item Obj"
  POSITION 6
  SQL-WIDTH 21
  VALMSG "o_obj"
  HELP "Workspace item obj"
  DECIMALS 6
  ORDER 50

ADD FIELD "modification_type" OF "rvt_workspace_checkout" AS character 
  DESCRIPTION "This indicates the type of modification e.g. 

VER=Version Change
REV=Revision Change
PAT=Patch Change
UNK=Unknown

It is only required where we have to update the version number from outside of the SCM tool.

This indicates how the version number will be incremented.  The version number is a six-digit number made up of three two-digit components, e.g. VVRRPP.  The component whose value is incremented corresponds to the indicated modification type.

The version number is only incremented once during a single checkout.

Ant says we don't need a Modification_type table on which to store the integer value by which version numbers are incremented (1, 100, 10000).  This was Robin's idea and has been vetoed.  Ant says we can do it later.
"
  FORMAT "X(3)"
  INITIAL ""
  LABEL "Modification Type"
  POSITION 7
  SQL-WIDTH 6
  VALMSG "s_mnemonic"
  HELP "Modification type"
  ORDER 60

ADD INDEX "XPKrvt_workspace_checkout" ON "rvt_workspace_checkout" 
  AREA "Schema Area"
  UNIQUE
  PRIMARY
  INDEX-FIELD "workspace_checkout_obj" ASCENDING 

ADD INDEX "XAK1rvt_workspace_checkout" ON "rvt_workspace_checkout" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "workspace_item_obj" ASCENDING 

ADD INDEX "XAK2rvt_workspace_checkout" ON "rvt_workspace_checkout" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "task_number" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "workspace_item_obj" ASCENDING 

ADD INDEX "XAK3rvt_workspace_checkout" ON "rvt_workspace_checkout" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "configuration_type" ASCENDING 
  INDEX-FIELD "workspace_item_obj" ASCENDING 
  INDEX-FIELD "workspace_obj" ASCENDING 
  INDEX-FIELD "task_number" ASCENDING 

ADD INDEX "XAK4rvt_workspace_checkout" ON "rvt_workspace_checkout" 
  AREA "Schema Area"
  UNIQUE
  INDEX-FIELD "workspace_item_obj" ASCENDING 

.
PSC
cpstream=ISO8859-1
.
0000055397
