&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12
&ANALYZE-RESUME
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" Include _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* ICF Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" Include _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" Include _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS Include 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors: MIP Holdings (Pty) Ltd ("MIP")                       *
*               PSC                                                  *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------

  File: rycavtrigw.i

  Description:  ICF Template write trigger customisation

  Purpose:      This file is originally generated by ERwin from the template
                af/sup/aftemtrigw.i
                to hold customisations to the table write trigger for additional
                validation, etc.
                Once the file has been customised, it can no longer be regenerated
                from ERwin.

  Parameters:

  History:
  --------
  (v:010000)    Task:   90000034    UserRef:    POSSE
                Date:   26/03/2001  Author:     Anthony Swindells

  Update Notes: Convert to make work for POSSE

  (v:010002)    Task:   101000045   UserRef:    
                Date:   10/02/2001  Author:     Mark Davies

  Update Notes: Update trigger to assign collect_attribute_value_obj to attribute_value_obj for object instance values.

  (v:010003)    Task:   101000074   UserRef:    
                Date:   10/02/2001  Author:     Peter Judge

  Update Notes: Attributes cannot be added to more than one Object Instance in
                Repository Object Control

-----------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */

&scop object-name       rycavtrigw.i
&scop object-version    000000

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */



/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: Include
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: INCLUDE-ONLY
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW Include ASSIGN
         HEIGHT             = 4.29
         WIDTH              = 45.2.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK Include 


/* ***************************  Main Block  *************************** */
    DEFINE BUFFER rycav FOR ryc_attribute_value.

    DEFINE VARIABLE lCascade        AS LOGICAL    NO-UNDO INITIAL FALSE.
    DEFINE VARIABLE dAttributeValue AS DECIMAL                  NO-UNDO.
    DEFINE VARIABLE iAttributeValue AS INTEGER                  NO-UNDO.
    DEFINE VARIABLE tAttributeValue AS DATE                     NO-UNDO.
    DEFINE VARIABLE lAttributeValue AS LOGICAL                  NO-UNDO.

    /* Set the collection attribute to the attribute value object number. 
     * The collect attribute field is not used, and setting the value resolves 
     * issues with the unique indexes.                                          */
    ASSIGN ryc_attribute_value.collect_attribute_value_obj = ryc_attribute_value.attribute_value_obj.

    IF ryc_attribute_value.container_smartobject_obj > 0 THEN
        ASSIGN ryc_attribute_value.primary_smartobject_obj = ryc_attribute_value.container_smartobject_obj.
    ELSE
        ASSIGN ryc_attribute_value.primary_smartobject_obj = ryc_attribute_value.smartobject_obj.

    /* cascade changes to the attribute from ObjectType to SmartObject, or from SmartObject to ObjectInstance */
    /* warning: this trigger is essentially recursive, since write of one attribute value results in the writes of others */

    /* Added ryc_attribute_value.smartobject_obj = 0 to if statement below: */
    /* Remove the functionality for cascading attribute value changes for a smart object as it causes problems in the versioning system when a smartobject*/
    /* is changed and the containers it appears on are not all checked out*/
    /* A specific function will need to be provided to allow the cascading of changed attribures onto instances.*/

    IF ryc_attribute_value.object_instance_obj = 0 AND
       ryc_attribute_value.smartobject_obj     = 0 THEN
        ASSIGN lCascade = (NEW ryc_attribute_value) OR (o_ryc_attribute_value.attribute_value <> ryc_attribute_value.attribute_value).
    
    IF lCascade THEN
    DO:
        IF ryc_attribute_value.smartobject_obj = 0 THEN
        DO:
            /* MESSAGE "Cascading values for attribute " ryc_attribute_value.attribute_label " objecttype " ryc_attribute_value.object_type_obj. */
            /* this attribute was entered against an Object Type */
            FOR EACH ryc_smartobject NO-LOCK
                WHERE ryc_smartobject.OBJECT_type_obj = ryc_attribute_value.object_type_obj:

                FIND FIRST rycav EXCLUSIVE-LOCK 
                    WHERE rycav.attribute_label = ryc_attribute_value.attribute_label
                    AND   rycav.OBJECT_type_obj = ryc_smartobject.OBJECT_type_obj
                    AND   rycav.smartobject_obj = ryc_smartobject.smartobject_obj
                    AND   rycav.OBJECT_instance_obj = 0
                    NO-ERROR.
                IF NOT AVAILABLE rycav
                THEN DO:
                    CREATE rycav.
                    ASSIGN
                        rycav.attribute_label = ryc_attribute_value.attribute_label
                        rycav.smartobject_obj = ryc_attribute_value.smartobject_obj
                        rycav.OBJECT_instance_obj = 0
                        rycav.smartobject_obj = ryc_smartobject.smartobject_obj
                        rycav.collect_attribute_value_obj = rycav.attribute_value_obj.
                    BUFFER-COPY ryc_attribute_value EXCEPT inheritted_value container_smartobject_obj attribute_value_obj attribute_label collect_attribute_value_obj smartobject_obj OBJECT_instance_obj TO rycav.
                END.
                ELSE DO:
                    IF rycav.inheritted_value 
                    THEN
                        BUFFER-COPY ryc_attribute_value EXCEPT inheritted_value container_smartobject_obj attribute_value_obj attribute_label collect_attribute_value_obj smartobject_obj OBJECT_instance_obj TO rycav.
                END.
            END.    /* each smartobject */
        END.    /* smartobject = 0 */
        ELSE
        IF ryc_attribute_value.object_instance_obj = 0
        THEN DO:
            /* MESSAGE "Cascading values for attribute " ryc_attribute_value.attribute_label " smartobject " ryc_attribute_value.smartobject_obj "attribute_value_obj=" ryc_attribute_value.attribute_value_obj "object_inatcne_obj=" ryc_attribute_value.object_instance_obj "container_smartobject_obj=" ryc_attribute_value.container_smartobject_obj. */
            /* this attribute was entered against a Smartobject */
            FOR EACH ryc_object_instance NO-LOCK
                WHERE ryc_object_instance.smartobject_obj = ryc_attribute_value.smartobject_obj,
                FIRST ryc_smartobject NO-LOCK
                WHERE ryc_smartobject.smartobject_obj = ryc_object_instance.smartobject_obj:

                FIND FIRST rycav EXCLUSIVE-LOCK 
                    WHERE rycav.attribute_label = ryc_attribute_value.attribute_label
                    AND   rycav.OBJECT_type_obj = ryc_smartobject.OBJECT_type_obj
                    AND   rycav.smartobject_obj = ryc_attribute_value.smartobject_obj
                    AND   rycav.OBJECT_instance_obj = ryc_object_instance.OBJECT_instance_obj
                    NO-ERROR.
                IF NOT AVAILABLE rycav
                THEN DO:
                    {af/sup/afvalidtrg.i &ACTION=CREATE
                                         &TABLE=rycav
                    }
                    ASSIGN
                        rycav.attribute_label = ryc_attribute_value.attribute_label
                        rycav.smartobject_obj = ryc_attribute_value.smartobject_obj
                        rycav.OBJECT_instance_obj = ryc_object_instance.object_instance_obj
                        rycav.container_smartobject_obj = ryc_object_instance.container_smartobject_obj
                        rycav.collect_attribute_value_obj = rycav.attribute_value_obj.
                    BUFFER-COPY ryc_attribute_value EXCEPT inheritted_value container_smartobject_obj attribute_value_obj attribute_label collect_attribute_value_obj smartobject_obj OBJECT_instance_obj TO rycav.
                END.
                ELSE DO:
                    IF rycav.inheritted_value 
                    THEN
                        BUFFER-COPY ryc_attribute_value EXCEPT inheritted_value container_smartobject_obj attribute_value_obj attribute_label collect_attribute_value_obj smartobject_obj OBJECT_instance_obj TO rycav.
                END.

                /* MESSAGE "before validate, rycav.object_instance_obj = "  rycav.object_instance_obj " rycav.attribute_value_obj=" rycav.attribute_value_obj "rycav.container_smartobject_obj =" rycav.container_smartobject_obj. */

                {af/sup/afvalidtrg.i &ACTION=VALIDATE
                                     &TABLE=rycav
                }

            END.    /* each obj inst */
        END.    /* obj inst = 0 */
    END.    /* cascade attribute values */

    /* Handle potential numeric format issues and date format issues.
     * Remove all numeric separators by assigning the decimal value to a string.
     * Replace the decimal point with ".". When retrieving the attribute value
     * we will need to convert the "." back into the session's decimal point.   
     *
     * Convert any dates into their integer representations.
     *
     * Whenever retrieving these values, the attribute value must first be passed
     * through the FormatAttributeValue API in the Repository Manager.           */
    IF ryc_attribute_value.attribute_value NE "":U THEN
    CASE ryc_attribute_value.attribute_type_TLA:
        WHEN "DEC":U THEN
        DO:
            ASSIGN dAttributeValue = DECIMAL(ryc_attribute_value.attribute_value) NO-ERROR.
            IF NOT ERROR-STATUS:ERROR THEN
                ASSIGN ryc_attribute_value.attribute_value = STRING(dAttributeValue)
                       ryc_attribute_value.attribute_value = REPLACE(ryc_attribute_value.attribute_value,
                                                                     SESSION:NUMERIC-DECIMAL-POINT,
                                                                     ".":U)
                       .
            ELSE
            DO:
                /* Check whether the attribute value is already in the correct format before 
                 * reporting an error.
                 * This is only necessary for numbers with decimal places (i.e. non-whole
                 * numbers). Whole numbers will pass the first test. The numbers will thus have
                 * the form XXX.YYY, which represents 2 entries in a "." delimited string. If this
                 * is the case, assume that this is a correctly formatted string.                 */
                IF NUM-ENTRIES(ryc_attribute_value.attribute_value, ".":U) NE 2 THEN
                DO:
                    ASSIGN lv-error   = YES
                           lv-errgrp  = "AF":U
                           lv-errnum  = 5
                           lv-include = "decimal attribute value" + "|":U
                                      + "The attribute value (" + ryc_attribute_value.attribute_value + ") could not be converted into a valid decimal. The current session decimal point is '" + SESSION:NUMERIC-DECIMAL-POINT + "'":U
                           .
                    RUN error-message (lv-errgrp,lv-errnum,lv-include).
                END.    /* not already in correct format. */
            END.    /* error converting decimal */
        END.    /* DECIMAL */
        WHEN "DAT":U THEN
        DO:
            /* Always store dates as integers. The FormatAttributeValue API
             * in the Repository Manager transforms the date correctly, though.  */
            ASSIGN tAttributeValue = DATE(ryc_attribute_value.attribute_value) NO-ERROR.
            IF NOT ERROR-STATUS:ERROR THEN
                ASSIGN ryc_attribute_value.attribute_value = STRING(INTEGER(tAttributeValue)).
            ELSE
            DO:
                ASSIGN lv-error   = YES
                       lv-errgrp  = "AF":U
                       lv-errnum  = 5
                       lv-include = "date attribute value" + "|":U
                                  + "The attribute value (" + ryc_attribute_value.attribute_value + ") could not be converted into a valid date for the current date format (" + SESSION:DATE-FORMAT + ") ":U
                       .
                RUN error-message (lv-errgrp,lv-errnum,lv-include).
            END.    /* error converting date */
        END.    /* DAT */
        WHEN "INT":U THEN
        DO:
            /* String out any formatting, such as numeric separators. */
            ASSIGN iAttributeValue = INTEGER(ryc_attribute_value.attribute_value) NO-ERROR.
            IF NOT ERROR-STATUS:ERROR THEN
                ASSIGN ryc_attribute_value.attribute_value = STRING(iAttributeValue).
            ELSE
            DO:
                ASSIGN lv-error   = YES
                       lv-errgrp  = "AF":U
                       lv-errnum  = 5
                       lv-include = "integer attribute value" + "|":U
                                   + "The attribute value (" + ryc_attribute_value.attribute_value + ") could not be converted into a valid integer."
                       .
                RUN error-message (lv-errgrp,lv-errnum,lv-include).
            END.    /* error converting integer */
        END.    /* INT */
        WHEN "LOG":U THEN
        DO:
            IF LOOKUP(ryc_attribute_value.attribute_value, "YES,TRUE":U) GT 0 THEN
                ASSIGN lAttributeValue = YES.
            ELSE
            IF LOOKUP(ryc_attribute_value.attribute_value, "NO,FALSE":U) GT 0 THEN
                ASSIGN lAttributeValue = NO.
            ELSE
                ASSIGN lAttributeValue = ?.

            ASSIGN ryc_attribute_value.attribute_value = STRING(lAttributeValue).
        END.    /* LOG */
    END CASE.   /* attribute type TLA */

    /* EOF */

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


