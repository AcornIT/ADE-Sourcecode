/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors: MIP Holdings (Pty) Ltd ("MIP")                       *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF ryc_smartobject .

/* generic trigger override include file to disable trigger if required */
{af/sup2/aftrigover.i &DB-NAME      = "ICFDB"
                      &TABLE-NAME   = "ryc_smartobject"
                      &TRIGGER-TYPE = "DELETE"}

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   ryc_smartobject           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE ryc_smartobject
&SCOPED-DEFINE TRIGGER_FLA rycso
&SCOPED-DEFINE TRIGGER_OBJ smartobject_obj


DEFINE BUFFER lb_table FOR ryc_smartobject.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR ryc_smartobject.     /* Used for lock upgrades */

DEFINE BUFFER o_ryc_smartobject FOR ryc_smartobject.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

IF VALID-HANDLE(gshSessionManager)
THEN DO:
  RUN setActionUnderway IN gshSessionManager
                       (INPUT "DYN":U
                       ,INPUT "DEL":U
                       ,INPUT STRING(ryc_smartobject.object_filename)
                       ,INPUT "RYCSO":U
                       ,INPUT STRING(ryc_smartobject.smartobject_obj)
                       ).
END.

/* Generated by ICF ERwin Template */
/* ryc_smartobject contains ryc_page ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_page) = 0 &THEN
  DEFINE BUFFER lbe_page FOR ryc_page.
  &GLOBAL-DEFINE lbe_page yes
&ENDIF
FOR EACH ryc_page NO-LOCK
   WHERE ryc_page.container_smartobject_obj = ryc_smartobject.smartobject_obj
   ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete ryc_page":U:
    FIND FIRST lbe_page EXCLUSIVE-LOCK
         WHERE ROWID(lbe_page) = ROWID(ryc_page)
         NO-ERROR.
    IF AVAILABLE lbe_page THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_page"}
      END.
END.





/* Generated by ICF ERwin Template */
/* ryc_smartobject contains ryc_smartlink ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_smartlink) = 0 &THEN
  DEFINE BUFFER lbe_smartlink FOR ryc_smartlink.
  &GLOBAL-DEFINE lbe_smartlink yes
&ENDIF
FOR EACH ryc_smartlink NO-LOCK
   WHERE ryc_smartlink.container_smartobject_obj = ryc_smartobject.smartobject_obj
   ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete ryc_smartlink":U:
    FIND FIRST lbe_smartlink EXCLUSIVE-LOCK
         WHERE ROWID(lbe_smartlink) = ROWID(ryc_smartlink)
         NO-ERROR.
    IF AVAILABLE lbe_smartlink THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_smartlink"}
      END.
END.





/* Generated by ICF ERwin Template */
/* ryc_smartobject container ryc_object_instance ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_object_instance) = 0 &THEN
  DEFINE BUFFER lbe_object_instance FOR ryc_object_instance.
  &GLOBAL-DEFINE lbe_object_instance yes
&ENDIF
FOR EACH ryc_object_instance NO-LOCK
   WHERE ryc_object_instance.container_smartobject_obj = ryc_smartobject.smartobject_obj
   ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete ryc_object_instance":U:
    FIND FIRST lbe_object_instance EXCLUSIVE-LOCK
         WHERE ROWID(lbe_object_instance) = ROWID(ryc_object_instance)
         NO-ERROR.
    IF AVAILABLE lbe_object_instance THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_object_instance"}
      END.
END.





/* Generated by ICF ERwin Template */
/* ryc_smartobject has ryc_custom_ui_trigger ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST ryc_custom_ui_trigger WHERE
    ryc_custom_ui_trigger.smartobject_obj = ryc_smartobject.smartobject_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "ryc_smartobject|ryc_custom_ui_trigger":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* ryc_smartobject contains ryc_smartobject_field ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_smartobject_field) = 0 &THEN
  DEFINE BUFFER lbe_smartobject_field FOR ryc_smartobject_field.
  &GLOBAL-DEFINE lbe_smartobject_field yes
&ENDIF
FOR EACH ryc_smartobject_field NO-LOCK
   WHERE ryc_smartobject_field.smartobject_obj = ryc_smartobject.smartobject_obj
   ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete ryc_smartobject_field":U:
    FIND FIRST lbe_smartobject_field EXCLUSIVE-LOCK
         WHERE ROWID(lbe_smartobject_field) = ROWID(ryc_smartobject_field)
         NO-ERROR.
    IF AVAILABLE lbe_smartobject_field THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_smartobject_field"}
      END.
END.







/* Generic comments deletion */
DEFINE BUFFER lbx_gsm_comment FOR gsm_comment.
DEFINE BUFFER lby_gsm_comment FOR gsm_comment.
IF CAN-FIND(FIRST lbx_gsm_comment 
            WHERE lbx_gsm_comment.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_comment NO-LOCK
       WHERE lbx_gsm_comment.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete gsm_comment":U:
        FIND FIRST lby_gsm_comment EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_comment) = ROWID(lbx_gsm_comment)
             NO-ERROR.
        IF AVAILABLE lby_gsm_comment THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_comment"}
          END.
    END.
/* Generic security allocation deletion */
DEFINE BUFFER lbx_gsm_user_allocation FOR gsm_user_allocation.
DEFINE BUFFER lby_gsm_user_allocation FOR gsm_user_allocation.
IF CAN-FIND(FIRST lbx_gsm_user_allocation 
            WHERE lbx_gsm_user_allocation.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_user_allocation NO-LOCK
       WHERE lbx_gsm_user_allocation.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete gsm_user_allocation":U:
        FIND FIRST lby_gsm_user_allocation EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_user_allocation) = ROWID(lbx_gsm_user_allocation)
             NO-ERROR.
        IF AVAILABLE lby_gsm_user_allocation THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_user_allocation"}
          END.
    END.
/* Generic multi-media deletion */
DEFINE BUFFER lbx_gsm_multi_media FOR gsm_multi_media.
DEFINE BUFFER lby_gsm_multi_media FOR gsm_multi_media.
IF CAN-FIND(FIRST lbx_gsm_multi_media 
            WHERE lbx_gsm_multi_media.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_multi_media NO-LOCK
       WHERE lbx_gsm_multi_media.owning_obj = ryc_smartobject.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rycsotrigd.p^delete gsm_multi_media":U:
        FIND FIRST lby_gsm_multi_media EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_multi_media) = ROWID(lbx_gsm_multi_media)
             NO-ERROR.
        IF AVAILABLE lby_gsm_multi_media THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_multi_media"}
          END.
    END.








/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'rycso':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "rycso":U, INPUT BUFFER ryc_smartobject:HANDLE, INPUT BUFFER o_ryc_smartobject:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */

{icf/trg/rycsotrigd.i}

