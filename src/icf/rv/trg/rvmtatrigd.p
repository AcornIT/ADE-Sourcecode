/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors: MIP Holdings (Pty) Ltd ("MIP")                       *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF rvm_task .

/* generic trigger override include file to disable trigger if required */
{af/sup2/aftrigover.i &DB-NAME      = "RVDB"
                      &TABLE-NAME   = "rvm_task"
                      &TRIGGER-TYPE = "DELETE"}

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   rvm_task           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE rvm_task
&SCOPED-DEFINE TRIGGER_FLA rvmta
&SCOPED-DEFINE TRIGGER_OBJ task_obj


DEFINE BUFFER lb_table FOR rvm_task.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR rvm_task.     /* Used for lock upgrades */

DEFINE BUFFER o_rvm_task FOR rvm_task.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* rvm_task resulted in rvt_transaction ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST rvt_transaction WHERE
    rvt_transaction.task_number = rvm_task.task_number) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "rvm_task|rvt_transaction":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* rvm_task resulted in rvt_item_version ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST rvt_item_version WHERE
    rvt_item_version.task_number = rvm_task.task_number) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "rvm_task|rvt_item_version":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* rvm_task has rvt_deleted_item ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST rvt_deleted_item WHERE
    rvt_deleted_item.task_number = rvm_task.task_number) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "rvm_task|rvt_deleted_item":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* rvm_task comprises rvt_workspace_checkout ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST rvt_workspace_checkout WHERE
    rvt_workspace_checkout.task_number = rvm_task.task_number) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "rvm_task|rvt_workspace_checkout":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* rvm_task contains rvm_task_object ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_task_object) = 0 &THEN
  DEFINE BUFFER lbe_task_object FOR rvm_task_object.
  &GLOBAL-DEFINE lbe_task_object yes
&ENDIF
FOR EACH rvm_task_object NO-LOCK
   WHERE rvm_task_object.task_number = rvm_task.task_number
   ON STOP UNDO, RETURN ERROR "AF^104^rvmtatrigd.p^delete rvm_task_object":U:
    FIND FIRST lbe_task_object EXCLUSIVE-LOCK
         WHERE ROWID(lbe_task_object) = ROWID(rvm_task_object)
         NO-ERROR.
    IF AVAILABLE lbe_task_object THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_task_object"}
      END.
END.





/* Generated by ICF ERwin Template */
/* rvm_task had rvm_task_history ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_task_history) = 0 &THEN
  DEFINE BUFFER lbe_task_history FOR rvm_task_history.
  &GLOBAL-DEFINE lbe_task_history yes
&ENDIF
FOR EACH rvm_task_history NO-LOCK
   WHERE rvm_task_history.task_number = rvm_task.task_number
   ON STOP UNDO, RETURN ERROR "AF^104^rvmtatrigd.p^delete rvm_task_history":U:
    FIND FIRST lbe_task_history EXCLUSIVE-LOCK
         WHERE ROWID(lbe_task_history) = ROWID(rvm_task_history)
         NO-ERROR.
    IF AVAILABLE lbe_task_history THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_task_history"}
      END.
END.







/* Generic comments deletion */
DEFINE BUFFER lbx_gsm_comment FOR gsm_comment.
DEFINE BUFFER lby_gsm_comment FOR gsm_comment.
IF CAN-FIND(FIRST lbx_gsm_comment 
            WHERE lbx_gsm_comment.owning_obj = rvm_task.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_comment NO-LOCK
       WHERE lbx_gsm_comment.owning_obj = rvm_task.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rvmtatrigd.p^delete gsm_comment":U:
        FIND FIRST lby_gsm_comment EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_comment) = ROWID(lbx_gsm_comment)
             NO-ERROR.
        IF AVAILABLE lby_gsm_comment THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_comment"}
          END.
    END.
/* Generic security allocation deletion */
DEFINE BUFFER lbx_gsm_user_allocation FOR gsm_user_allocation.
DEFINE BUFFER lby_gsm_user_allocation FOR gsm_user_allocation.
IF CAN-FIND(FIRST lbx_gsm_user_allocation 
            WHERE lbx_gsm_user_allocation.owning_obj = rvm_task.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_user_allocation NO-LOCK
       WHERE lbx_gsm_user_allocation.owning_obj = rvm_task.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rvmtatrigd.p^delete gsm_user_allocation":U:
        FIND FIRST lby_gsm_user_allocation EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_user_allocation) = ROWID(lbx_gsm_user_allocation)
             NO-ERROR.
        IF AVAILABLE lby_gsm_user_allocation THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_user_allocation"}
          END.
    END.
/* Generic multi-media deletion */
DEFINE BUFFER lbx_gsm_multi_media FOR gsm_multi_media.
DEFINE BUFFER lby_gsm_multi_media FOR gsm_multi_media.
IF CAN-FIND(FIRST lbx_gsm_multi_media 
            WHERE lbx_gsm_multi_media.owning_obj = rvm_task.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_multi_media NO-LOCK
       WHERE lbx_gsm_multi_media.owning_obj = rvm_task.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^rvmtatrigd.p^delete gsm_multi_media":U:
        FIND FIRST lby_gsm_multi_media EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_multi_media) = ROWID(lbx_gsm_multi_media)
             NO-ERROR.
        IF AVAILABLE lby_gsm_multi_media THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_multi_media"}
          END.
    END.








/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'rvmta':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "rvmta":U, INPUT BUFFER rvm_task:HANDLE, INPUT BUFFER o_rvm_task:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */

{rv/trg/rvmtatrigd.i}






