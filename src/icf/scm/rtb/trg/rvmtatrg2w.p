&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12
&ANALYZE-RESUME
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" Include _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* ICF Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" Include _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" Include _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS Include 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors: MIP Holdings (Pty) Ltd ("MIP")                       *
*               PSC                                                  *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------

  File: rvmtatrg2w.p

  Description:  ICF Template write trigger customisation

  Purpose:      This file is originally generated by ERwin from the template
                af/sup/aftemtrigw.i
                to hold customisations to the table write trigger for additional
                validation, etc.
                Once the file has been customised, it can no longer be regenerated
                from ERwin.

  Parameters:

  History:
  --------
  (v:010000)    Task:           0   UserRef:    
                Date:   12/13/2001  Author:     

  Update Notes: Convert to make work for POSSE

-------------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */

&scop object-name       rvmtatrg2w.p
&scop object-version    000000

/* Standard top of WRITE trigger code */
{af/sup/aftrigtopw.i}

DEFINE PARAMETER BUFFER b_rvm_task   FOR rvm_task.
DEFINE PARAMETER BUFFER b_o_rvm_task FOR rvm_task.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */



/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: Include
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: INCLUDE-ONLY
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW Include ASSIGN
         HEIGHT             = 19.95
         WIDTH              = 55.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK Include 


/* ***************************  Main Block  *************************** */

  /* Define RTB global shared variables - used for RTB integration hooks (if installed) */
  DEFINE NEW GLOBAL SHARED VARIABLE grtb-wspace-id    AS CHARACTER    NO-UNDO.

  /* keep rtb_task in synch with b_rvm_task. Override rtb_task trigger to prevent recursion as rtb_task write trigger also tries to update b_rvm_task */
  DEFINE VARIABLE lv_character                            AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE lv_loop                                 AS INTEGER      NO-UNDO.

  ON WRITE OF rtb_task OVERRIDE DO:
  END.

  IF b_rvm_task.task_status = "":U
  THEN
      ASSIGN
          b_rvm_task.task_status = "W":U.

  IF b_rvm_task.task_number = 0
  AND b_rvm_task.task_workspace <> "":U
  THEN DO:
      /* need to create Roundtable task first, then get task number generated */
      DEFINE VARIABLE lh_rtbplip                              AS HANDLE       NO-UNDO.
      DEFINE VARIABLE lv_recid                                AS RECID        NO-UNDO.

      IF grtb-wspace-id = "":U
      THEN
          ASSIGN
              grtb-wspace-id = b_rvm_task.task_workspace.
      RUN rtb/p/rtb_api.p PERSISTENT SET lh_rtbplip.
      RUN create_task IN lh_rtbplip (INPUT  b_rvm_task.task_workspace
                                    ,INPUT  b_rvm_task.task_programmer
                                    ,INPUT  b_rvm_task.task_manager
                                    ,OUTPUT lv_recid
                                    ,OUTPUT lv_character).

      IF VALID-HANDLE(lh_rtbplip)
      THEN DELETE PROCEDURE lh_rtbplip.

      FIND FIRST rtb_task NO-LOCK
          WHERE RECID(rtb_task) = lv_recid
          NO-ERROR.
      IF AVAILABLE rtb_task
      THEN
          ASSIGN
              b_rvm_task.task_number = rtb_task.task-num
              b_rvm_task.task_status = rtb_task.task-status
              .

  END.

  IF b_rvm_task.task_number = 0
  THEN DO:
      ASSIGN
          lv-error = YES
          lv-errgrp = "AF":U
          lv-errnum = 1
          lv-include = "task number":U.
      RUN error-message (lv-errgrp,lv-errnum,lv-include).
  END.

  /* Find rtb_task and update it to keep it in synch */
  FIND FIRST rtb_task EXCLUSIVE-LOCK
      WHERE rtb_task.task-num = b_rvm_task.task_number
      NO-ERROR.
  IF AVAILABLE rtb_task
  THEN DO:

      ASSIGN
          rtb_task.wspace-id      = b_rvm_task.task_workspace
          rtb_task.manager        = b_rvm_task.task_manager
          rtb_task.programmer     = b_rvm_task.task_programmer
          rtb_task.task-status    = b_rvm_task.task_status
          rtb_task.entered-when   = b_rvm_task.task_entered_date
          rtb_task.compltd-when   = b_rvm_task.task_completed_date
          rtb_task.user-task-ref  = b_rvm_task.task_user_reference
          rtb_task.summary        = b_rvm_task.task_summary
          .

      IF b_rvm_task.task_description <> b_o_rvm_task.task_description
      THEN DO lv_loop = 1 TO 15:
          IF lv_loop <= NUM-ENTRIES(b_rvm_task.task_description,CHR(10))
          THEN
              ASSIGN
                  lv_character = REPLACE(ENTRY(lv_loop,b_rvm_task.task_description,CHR(10)),"|":U," ":U).
          ELSE
              ASSIGN
                  lv_character = "":U.
          ASSIGN
              rtb_task.description[lv_loop] = lv_character.
      END.

      IF rtb_task.share-status = "":U
      OR (rtb_task.share-status = "task":U AND rtb_task.task-directory = "":U)
      THEN DO:
          DEFINE VARIABLE lv_wip_drive AS CHARACTER NO-UNDO.
          DEFINE VARIABLE lv_workspace AS CHARACTER NO-UNDO.

          ASSIGN
              lv_wip_drive = "w:/":U
              lv_workspace = IF LENGTH(b_rvm_task.task_workspace) > 1 THEN SUBSTRING(b_rvm_task.task_workspace,1,2) ELSE "":U
              .

          IF CAN-DO("pc,ma,pr,gp":U, lv_workspace)
          THEN
              ASSIGN
                  lv_wip_drive = "y:/":U.
          IF CAN-DO("lg":U, lv_workspace)
          THEN
              ASSIGN
                  lv_wip_drive = "c:/":U.

          ASSIGN
              rtb_task.share-status = "task":U
              rtb_task.task-directory = lv_wip_drive +
              b_rvm_task.task_programmer + "/":U +
              b_rvm_task.task_workspace
              .
      END.

  END.

  IF AVAILABLE rtb_task
  AND rtb_task.task-status = "W":U
  AND INTEGER(SUBSTRING(b_rvm_task.current_test_status,1,1)) > 2
  THEN DO:
      ASSIGN
          lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task test status|Valid statuses for WIP tasks are 1-OPN,2-WIP":U.
      RUN error-message (lv-errgrp,lv-errnum,lv-include).
  END.

/* cannoy do next validation due to a timing problem when completeing tasks. The status is only change in the after task complete hook                         */
/*     IF AVAILABLE rtb_task                                                                                                                                   */
/*     AND rtb_task.task-status = "C":U                                                                                                                        */
/*     AND INTEGER(SUBSTRING(b_rvm_task.current_test_status,1,1)) < 3                                                                                            */
/*     THEN DO:                                                                                                                                                */
/*         ASSIGN                                                                                                                                              */
/*             lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task test status|A completed task cannot have a test status of 1-OPN or 2-WIP":U. */
/*         RUN error-message (lv-errgrp,lv-errnum,lv-include).                                                                                                 */
/*     END.                                                                                                                                                    */

  /* Validate status changes */
  IF (b_rvm_task.current_test_area   <> b_o_rvm_task.current_test_area
   OR b_rvm_task.current_test_status <> b_o_rvm_task.current_test_status)
  THEN DO:
      IF b_rvm_task.current_test_area BEGINS "D":U
      AND b_rvm_task.task_workspace <> "pc-dev":U
      AND NOT CAN-DO("1-OPN,2-WIP,3-COM,7-DEP":U, b_rvm_task.current_test_status)
      THEN DO:
          ASSIGN
              lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task area / status|Valid statuses for DEV are 1-OPN,2-WIP,3-COM,7-DEP":U.
          RUN error-message (lv-errgrp,lv-errnum,lv-include).
      END.
      IF b_rvm_task.current_test_area BEGINS "T":U
      AND NOT CAN-DO("1-OPN,2-WIP,4-TOT,5-TIP,6-BUG,6-TOK,6-BAS":U, b_rvm_task.current_test_status)
      THEN DO:
          ASSIGN
              lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task area / status|Valid statuses for TST are 1-OPN,2-WIP,4-TOT,5-TIP,6-BUG,6-TOK,6-BAS":U.
          RUN error-message (lv-errgrp,lv-errnum,lv-include).
      END.
      IF b_rvm_task.current_test_area BEGINS "V":U
      AND NOT CAN-DO("1-OPN,2-WIP,4-TOT,5-TIP,6-BUG,6-TOK,6-BAS,7-DEP":U, b_rvm_task.current_test_status)
      THEN DO:
          ASSIGN
              lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task area / status|Valid statuses for V?X are 1-OPN,2-WIP,4-TOT,5-TIP,6-BUG,6-TOK,6-BAS,7-DEP":U.
          RUN error-message (lv-errgrp,lv-errnum,lv-include).
      END.
      IF b_o_rvm_task.current_test_area BEGINS "D":U
      AND b_rvm_task.current_test_area BEGINS "V":U
      THEN DO:
          ASSIGN
              lv-error = YES lv-errgrp = "AF":U lv-errnum = 5 lv-include = "task area|Cannot move from DEV TO V1X directly":U.
          RUN error-message (lv-errgrp,lv-errnum,lv-include).
      END.
  END.

  IF (b_rvm_task.current_test_area   <> b_o_rvm_task.current_test_area
   OR b_rvm_task.current_test_status <> b_o_rvm_task.current_test_status)
  THEN
      ASSIGN
          b_rvm_task.test_status_date = TODAY.

  IF INTEGER(SUBSTRING(b_rvm_task.current_test_status,1,1)) > 2
  THEN
      ASSIGN
          b_rvm_task.task_status = "C":U.

  /* keep task history up-to-date here */
  IF (b_rvm_task.current_test_area   <> b_o_rvm_task.current_test_area
   OR b_rvm_task.current_test_status <> b_o_rvm_task.current_test_status)
  AND NOT CAN-FIND(FIRST rvm_task_history
                   WHERE rvm_task_history.task_number      = b_rvm_task.task_number
                   AND   rvm_task_history.task_test_area   = b_rvm_task.current_test_area
                   AND   rvm_task_history.task_test_status = b_rvm_task.current_test_status
                   AND   rvm_task_history.test_status_date = b_rvm_task.test_status_date)
  THEN DO:
      {af/sup/afvalidtrg.i &action = "CREATE"
                           &table = "rvm_task_history"}
      ASSIGN
          rvm_task_history.task_number      = b_rvm_task.task_number
          rvm_task_history.task_test_area   = b_rvm_task.current_test_area
          rvm_task_history.task_test_status = b_rvm_task.current_test_status
          rvm_task_history.test_status_date = b_rvm_task.test_status_date
          rvm_task_history.test_status_user = b_rvm_task.test_status_user
          .
      {af/sup/afvalidtrg.i &action = "VALIDATE"
                           &table = "rvm_task_history"}
  END.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


