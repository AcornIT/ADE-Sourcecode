&ANALYZE-SUSPEND _VERSION-NUMBER UIB_v8r12
&ANALYZE-RESUME
{adecomm/appserv.i}
DEFINE VARIABLE h_Astra                    AS HANDLE          NO-UNDO.
&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Check Version Notes Wizard" DataLogicProcedure _INLINE
/* Actions: af/cod/aftemwizcw.w ? ? ? ? */
/* MIP Update Version Notes Wizard
Check object version notes.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Update-Object-Version" DataLogicProcedure _INLINE
/* Actions: ? ? ? ? af/sup/afverxftrp.p */
/* This has to go above the definitions sections, as that is what it modifies.
   If its not, then the definitions section will have been saved before the
   XFTR code kicks in and changes it */
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _XFTR "Definition Comments Wizard" DataLogicProcedure _INLINE
/* Actions: ? af/cod/aftemwizcw.w ? ? ? */
/* Program Definition Comment Block Wizard
Welcome to the Program Definition Comment Block Wizard. Press Next to proceed.
af/cod/aftemwizpw.w
*/
/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _DEFINITIONS DataLogicProcedure 
/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors:                                                      *
*                                                                    *
*********************************************************************/
/*---------------------------------------------------------------------------------
  File: gscoblog2p.p

  Description:  gsc_object Data Logic Procedure Library

  Purpose:      A procedure library (PLIP) to support the maintenance of the gsc_object table
                The following internal procedures may be added or modified
                to act as validation to creation, modification, or deletion of
                records in the database table
                
                Client-side:
                rowObjectValidate***
                
                Server-side upon create:
                createPreTransValidate***
                createBeginTransValidate
                createEndTransValidate
                createPostTransValidate
                
                Server-side upon write (create and modify):
                writePreTransValidate***
                writeBeginTransValidate
                writeEndTransValidate
                writePostTransValidate
                
                Server-side upon delete:
                deletePreTransValidate
                deleteBeginTransValidate
                deleteEndTransValidate
                deletePostTransValidate
                
                *** The rowObjectValidate, createPreTransValidate and writePreTransValidate
                internal procedures are automatically generated by the SDO generator

  Parameters:

  History:
  --------
  (v:010000)    Task:    90000033   UserRef:    POSSE
                Date:   20/04/2001  Author:     Phil Magnay

  Update Notes: Data Logic Procedure Auto-Generation

  (v:010001)    Task:    90000119   UserRef:    posse
                Date:   06/05/2001  Author:     Haavard Danielsen

  Update Notes: Point to src/adm2/logic.i

  (v:010002)    Task:           0   UserRef:    
                Date:   11/07/2001  Author:     Mark Davies (MIP)

  Update Notes: Added check in deletePreTransValidate to not delete an object if it is used as an instance on another object.

  (v:010003)    Task:    90000024   UserRef:    
                Date:   02/20/2002  Author:     Dynamics Admin User

  Update Notes: 

-------------------------------------------------------------------------------*/
/*                   This .W file was created with the Progress UIB.             */
/*-------------------------------------------------------------------------------*/

/* ***************************  Definitions  ************************** */
/* MIP-GET-OBJECT-VERSION pre-processors
   The following pre-processors are maintained automatically when the object is
   saved. They pull the object and version from Roundtable if possible so that it
   can be displayed in the about window of the container */

&scop object-name       gscoblog2p.p
DEFINE VARIABLE lv_this_object_name AS CHARACTER INITIAL "{&object-name}":U NO-UNDO.
&scop object-version    010003

/* Astra object identifying preprocessor */
&glob   AstraPlip    yes

DEFINE VARIABLE cObjectName         AS CHARACTER NO-UNDO.

ASSIGN cObjectName = "{&object-name}":U.

&scop   mip-notify-user-on-plip-close   NO


/* Data Preprocessor Definitions */
&GLOB DATA-LOGIC-TABLE gsc_object
&GLOB DATA-FIELD-DEFS  "af\obj2\gscobful2o.i"

/* Error handling definitions */
{af/sup2/afcheckerr.i &define-only = YES}
{af/sup2/afrun2.i &define-only = YES}

DEFINE TEMP-TABLE ttRycSmartObject RCODE-INFORMATION /* Defined same as RowobjUpd temp table */
    {ry/obj/rycsoful2o.i}
    {src/adm2/rupdflds.i}.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


&ANALYZE-SUSPEND _UIB-PREPROCESSOR-BLOCK 

/* ********************  Preprocessor Definitions  ******************** */

&Scoped-define PROCEDURE-TYPE DataLogicProcedure
&Scoped-define DB-AWARE yes


/* Db-Required definitions. */
&IF DEFINED(DB-REQUIRED) = 0 &THEN
    &GLOBAL-DEFINE DB-REQUIRED TRUE
&ENDIF
&GLOBAL-DEFINE DB-REQUIRED-START   &IF {&DB-REQUIRED} &THEN
&GLOBAL-DEFINE DB-REQUIRED-END     &ENDIF



/* _UIB-PREPROCESSOR-BLOCK-END */
&ANALYZE-RESUME



/* *********************** Procedure Settings ************************ */

&ANALYZE-SUSPEND _PROCEDURE-SETTINGS
/* Settings for THIS-PROCEDURE
   Type: DataLogicProcedure
   Allow: 
   Frames: 0
   Add Fields to: Neither
   Other Settings: CODE-ONLY COMPILE APPSERVER DB-AWARE
 */
&ANALYZE-RESUME _END-PROCEDURE-SETTINGS

/* *************************  Create Window  ************************** */

&ANALYZE-SUSPEND _CREATE-WINDOW
/* DESIGN Window definition (used by the UIB) 
  CREATE WINDOW DataLogicProcedure ASSIGN
         HEIGHT             = 15.05
         WIDTH              = 55.6.
/* END WINDOW DEFINITION */
                                                                        */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _INCLUDED-LIB DataLogicProcedure 
/* ************************* Included-Libraries *********************** */

{src/adm2/logic.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


 


&ANALYZE-SUSPEND _UIB-CODE-BLOCK _CUSTOM _MAIN-BLOCK DataLogicProcedure 


/* ***************************  Main Block  ******************************* */

{ry/app/ryplipmain.i}

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME


/* **********************  Internal Procedures  *********************** */

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE createEndTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE createEndTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
    DEFINE VARIABLE cMessageList                AS CHARACTER                NO-UNDO.

    /* If no security object exists, make this object secure itself. */
    IF b_gsc_object.security_object_obj EQ 0 OR b_gsc_object.security_object_obj EQ ? THEN
    DO:
        FIND gsc_object WHERE
             gsc_object.object_obj = b_gsc_object.object_obj
             EXCLUSIVE-LOCK NO-WAIT NO-ERROR.
        IF LOCKED gsc_object THEN
            ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList, CHR(3)) EQ 0 THEN "":U ELSE CHR(3))
                                + {af/sup2/aferrortxt.i 'AF' '104' 'gsc_object' '?' '"update the object record"'}.        
        ELSE
        IF AVAILABLE gsc_object THEN
        DO:
            ASSIGN gsc_object.security_object_obj = gsc_object.object_obj NO-ERROR.

            VALIDATE gsc_object NO-ERROR.
            ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList, CHR(3)) EQ 0 THEN "":U ELSE CHR(3))
                                + RETURN-VALUE.
        END.    /* avail object */
    END.    /* no security object. */

    ASSIGN ERROR-STATUS:ERROR = NO.
    RETURN cMessageList.
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE createPreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE createPreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate records server-side before the transaction scope upon create
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.

  IF CAN-FIND(FIRST gsc_object 
              WHERE gsc_object.product_module_obj = b_gsc_object.product_module_obj
                AND gsc_object.object_filename = b_gsc_object.object_filename) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsc_object.product_module_obj) + ', ' + STRING(b_gsc_object.object_filename)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsc_object' '' "'product_module_obj, object_filename, '" cValueList }.
  END.


  IF CAN-FIND(FIRST gsc_object 
              WHERE gsc_object.object_filename = b_gsc_object.object_filename) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsc_object.object_filename)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsc_object' '' "'object_filename, '" cValueList }.
  END.

  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE deletePreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE deletePreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  DEFINE VARIABLE iRowNumber      AS INTEGER    NO-UNDO.
  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.

  IF TRANSACTION
  THEN
    FOR EACH ttRycSmartObject:
      DELETE ttRycSmartObject.
    END.
  ELSE
    EMPTY TEMP-TABLE ttRycSmartObject.
  
  iRowNumber = 1.
  FIND FIRST ryc_smartobject 
       WHERE ryc_smartobject.object_obj = b_gsc_object.object_obj
       NO-LOCK NO-ERROR.
  IF AVAILABLE ryc_smartobject THEN DO:
    /* Check that we do not delete an object where the object is used as an 
       instance on another object */
    IF CAN-FIND(FIRST ryc_object_instance
                WHERE ryc_object_instance.smartobject_obj = ryc_smartobject.smartobject_obj) THEN DO:
      
      ASSIGN
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '101' 'gsc_object' '' "'object'" "'object instance'" "'This object is used as an instance on another object and may not be deleted.'"}.
      ERROR-STATUS:ERROR = NO.
      RETURN cMessageList.
    END.
    
    
    CREATE ttRycSmartObject.
    BUFFER-COPY ryc_smartobject
        TO ttRycSmartObject
            ASSIGN ttRycSmartObject.rowMod   = "D":U
                   ttRycSmartObject.rowIdent = STRING(ROWID(ryc_smartobject))
                   ttRycSmartObject.rowNum   = iRowNumber
                   iRowNumber                = iRowNumber + 1
                   .
  END.

  FIND FIRST ttRycSmartObject
       NO-LOCK NO-ERROR.
  IF AVAILABLE ttRycSmartObject THEN DO:
    SESSION:SET-WAIT-STATE("GENERAL":U).
    {af/sup2/afrun2.i &PLIP  = 'af/app/afgensrvrp.p'
                      &IProc = 'updateTableViaSDO'
                      &OnApp = 'YES'
                      &PList = "(INPUT 'ry/obj/rycsoful2o.w',~
                                 INPUT 'Smart Object SDO',~
                                 INPUT '',~
                                 INPUT '',~
                                 INPUT-OUTPUT TABLE ttRycSmartObject)"
                      &AutoKill=YES}
      SESSION:SET-WAIT-STATE("":U).
    IF RETURN-VALUE <> "":U THEN DO:
      MESSAGE "Error" RETURN-VALUE.
      RETURN ERROR RETURN-VALUE.
    END.
  END.
              
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE killPlip DataLogicProcedure 
PROCEDURE killPlip :
/*------------------------------------------------------------------------------
  Purpose:     entry point to instantly kill the plip if it should get lost in memory
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipkill.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE objectDescription DataLogicProcedure 
PROCEDURE objectDescription :
/*------------------------------------------------------------------------------
  Purpose:     Pass out a description of the PLIP, used in Plip temp-table
  Parameters:  <none>
  Notes:       This should be changed manually for each plip
------------------------------------------------------------------------------*/

  DEFINE OUTPUT PARAMETER cDescription AS CHARACTER NO-UNDO.

  ASSIGN cDescription = "Astra 2 gsc_object Data Logic Procedure".

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipSetup DataLogicProcedure 
PROCEDURE plipSetup :
/*------------------------------------------------------------------------------
  Purpose:    Run by main-block of PLIP at startup of PLIP
  Parameters: <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipsetu.i}  

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE plipShutdown DataLogicProcedure 
PROCEDURE plipShutdown :
/*------------------------------------------------------------------------------
  Purpose:     This procedure will be run just before the calling program 
               terminates
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  {ry/app/ryplipshut.i}

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE rowObjectValidate DataLogicProcedure 
PROCEDURE rowObjectValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate RowObject record client-side
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cDataTarget     AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE hDataTarget     AS HANDLE       NO-UNDO.
  DEFINE VARIABLE iLoop           AS INTEGER      NO-UNDO.
  DEFINE VARIABLE hAsHandle       AS HANDLE       NO-UNDO.
  
  IF b_gsc_object.product_module_obj = 0 OR b_gsc_object.product_module_obj = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'product_module_obj' "'Product Module Obj'"}.

  IF LENGTH(b_gsc_object.object_filename) = 0 OR LENGTH(b_gsc_object.object_filename) = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'object_filename' "'Object Filename'"}.

  IF b_gsc_object.generic_object = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'generic_object' "'Generic Object'"}.

  IF LENGTH(b_gsc_object.object_description) = 0 OR LENGTH(b_gsc_object.object_description) = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'object_description' "'Object Description'"}.

  IF b_gsc_object.object_type_obj = 0 OR b_gsc_object.object_type_obj = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'object_type_obj' "'Object Type Obj'"}.

  IF b_gsc_object.runnable_from_menu = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'runnable_from_menu' "'Runnable From Menu'"}.
  
  
    /* Check the that security object exists after creating the object, if this is a new object.
     * If we are creating a record, and the security_obj has not been specified, we will assign
     * the security_object_obj to the object_obj after the gsc_object record has been created.   */
     
 /* Issue 2393, remarked out as there is no requirement to verify 
    that the security object is not zero (DB) 
     IF b_gsc_object.rowMod              NE "A":U    AND
        ( b_gsc_object.security_object_obj EQ 0 OR
          b_gsc_object.security_object_obj EQ ?    ) THEN
        ASSIGN cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U)
                            + {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'security_object_obj' "'Security Object Obj'"}.
 */
  IF b_gsc_object.logical_object = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'logical_object' "'Logical Object'"}.

  IF b_gsc_object.container_object = ? THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '1' 'gsc_object' 'container_object' "'Container Object'"}.
  
  IF b_gsc_object.logical_object = TRUE AND
    (b_gsc_object.physical_object_obj = 0 OR 
     b_gsc_object.physical_object_obj = ?) THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '35' 'gsc_object' 'physical_object_obj' "'logical object|a physical object name'"}.
     
  IF b_gsc_object.logical_object = TRUE AND
     b_gsc_object.generic_object = TRUE THEN
    ASSIGN
      cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                    {af/sup2/aferrortxt.i 'AF' '40' 'gsc_object' 'generic_objec' "'You cannot make an object a generic object and a logical object. Choose one.'"}.
  
  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE writeEndTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE writeEndTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/
  
  /* There is something wrong when we try to copy
     This is a work-around until I have enough time
     to check why this does not work - leave the 
     code this way unless you have a solution
     Mark Davies - 10/11/2001 */
  IF CAN-FIND(FIRST ttRycSmartObject
              WHERE ttRycSmartObject.rowMod = "C":U) THEN DO:
    FOR EACH ttRycSmartObject 
        EXCLUSIVE-LOCK: /* Force of habit */
      IF ttRycSmartObject.rowMod = "":U THEN
        DELETE ttRycSmartObject.
      ELSE
        ttRycSmartObject.rowMod = "A":U.
    END.
  END.
  /****************************************************/
 


  FIND FIRST ttRycSmartObject
       EXCLUSIVE-LOCK NO-ERROR.
  IF AVAILABLE ttRycSmartObject THEN DO:
    IF ttRycSmartObject.object_obj = 0 OR 
       ttRycSmartObject.object_obj = ? THEN
      ASSIGN ttRycSmartObject.object_obj = b_gsc_object.object_obj.
    SESSION:SET-WAIT-STATE("GENERAL":U).
    {af/sup2/afrun2.i &PLIP  = 'af/app/afgensrvrp.p'
                      &IProc = 'updateTableViaSDO'
                      &OnApp = 'YES'
                      &PList = "(INPUT 'ry/obj/rycsoful2o.w',~
                                 INPUT 'Smart Object SDO',~
                                 INPUT '',~
                                 INPUT '',~
                                 INPUT-OUTPUT TABLE ttRycSmartObject)"
                      &AutoKill=YES}
      SESSION:SET-WAIT-STATE("":U).
    IF RETURN-VALUE <> "":U THEN
      RETURN ERROR RETURN-VALUE.
  
  END.
  
END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

{&DB-REQUIRED-START}

&ANALYZE-SUSPEND _UIB-CODE-BLOCK _PROCEDURE writePreTransValidate DataLogicProcedure  _DB-REQUIRED
PROCEDURE writePreTransValidate :
/*------------------------------------------------------------------------------
  Purpose:     Procedure used to validate records server-side before the transaction scope upon write
  Parameters:  <none>
  Notes:       
------------------------------------------------------------------------------*/

  DEFINE VARIABLE cMessageList    AS CHARACTER    NO-UNDO.
  DEFINE VARIABLE cValueList      AS CHARACTER    NO-UNDO.
  
  DEFINE BUFFER bryc_smartobject  FOR ryc_smartobject.
  DEFINE BUFFER bttRycSmartObject FOR ttRycSmartObject.
  
  IF NOT isCreate() AND CAN-FIND(FIRST gsc_object 
              WHERE gsc_object.product_module_obj = b_gsc_object.product_module_obj
                AND gsc_object.object_filename = b_gsc_object.object_filename
                AND ROWID(gsc_object) <> TO-ROWID(ENTRY(1,b_gsc_object.RowIDent))) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsc_object.product_module_obj) + ', ' + STRING(b_gsc_object.object_filename)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsc_object' '' "'product_module_obj, object_filename, '" cValueList }.
  END.


  IF NOT isCreate() AND CAN-FIND(FIRST gsc_object 
              WHERE gsc_object.object_filename = b_gsc_object.object_filename
                AND ROWID(gsc_object) <> TO-ROWID(ENTRY(1,b_gsc_object.RowIDent))) THEN
  DO:
     ASSIGN
        cValueList   = STRING(b_gsc_object.object_filename)
        cMessageList = cMessageList + (IF NUM-ENTRIES(cMessageList,CHR(3)) > 0 THEN CHR(3) ELSE '':U) + 
                      {af/sup2/aferrortxt.i 'AF' '8' 'gsc_object' '' "'object_filename, '" cValueList }.
  END.
  
  IF TRANSACTION
  THEN
    FOR EACH ttRycSmartObject:
      DELETE ttRycSmartObject.
    END.
  ELSE
    EMPTY TEMP-TABLE ttRycSmartObject.

  FIND FIRST bryc_smartobject 
       WHERE bryc_smartobject.object_obj = b_gsc_object.object_obj
       NO-LOCK NO-ERROR.
  CREATE ttRycSmartObject.  
  ASSIGN ttRycSmartObject.rowMod                 = b_gsc_object.rowMod
         ttRycSmartObject.RowNum                 = 10001
         ttRycSmartObject.RowIdent               = IF AVAILABLE bryc_smartobject THEN STRING(ROWID(bryc_smartobject)) ELSE "0"
         ttRycSmartObject.RowIdentIdx            = ttRycSmartObject.RowIdent
         ttRycSmartObject.layout_obj             = dLayoutObj 
         ttRycSmartObject.object_type_obj        = b_gsc_object.object_type_obj 
         ttRycSmartObject.object_filename        = b_gsc_object.object_filename
         ttRycSmartObject.product_module_obj     = b_gsc_object.product_module_obj 
         ttRycSmartObject.static_object          = b_gsc_object.lStaticObject
         ttRycSmartObject.custom_super_procedure = b_gsc_object.cCustomSuperProcedure
         ttRycSmartObject.system_owned           = b_gsc_object.lSystemOwned
         ttRycSmartObject.shutdown_message_text  = b_gsc_object.edShutdownMessageText
         ttRycSmartObject.sdo_smartobject_obj    = b_gsc_object.dSDOSmartObject 
         ttRycSmartObject.template_smartobject   = b_gsc_object.lTemplateSmartObject.
  /* Now create the before image of the file */
  IF ttRycSmartObject.rowMod <> "A":U THEN DO:
    CREATE bttRycSmartObject.
    ASSIGN bttRycSmartObject.rowMod                 = "":U
           bttRycSmartObject.RowNum                 = 10001
           bttRycSmartObject.RowIdent               = IF AVAILABLE bryc_smartobject THEN STRING(ROWID(bryc_smartobject)) ELSE "0"
           bttRycSmartObject.RowIdentIdx            = ttRycSmartObject.RowIdent
           bttRycSmartObject.object_obj             = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.object_obj ELSE 0
           bttRycSmartObject.layout_obj             = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.layout_obj ELSE 0
           bttRycSmartObject.object_type_obj        = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.object_type_obj ELSE 0
           bttRycSmartObject.object_filename        = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.object_filename ELSE "":U
           bttRycSmartObject.product_module_obj     = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.product_module_obj ELSE 0
           bttRycSmartObject.static_object          = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.static_object ELSE FALSE
           bttRycSmartObject.custom_super_procedure = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.custom_super_procedure ELSE "":U
           bttRycSmartObject.system_owned           = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.system_owned ELSE FALSE
           bttRycSmartObject.shutdown_message_text  = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.shutdown_message_text ELSE "":U
           bttRycSmartObject.sdo_smartobject_obj    = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.sdo_smartobject_obj ELSE 0
           bttRycSmartObject.template_smartobject   = IF AVAILABLE bryc_smartobject THEN bryc_smartobject.template_smartobject ELSE FALSE.
  END.
  
   /* Ensure that toolbar security objects are not zero. Issue 2393 (Don B)*/
  IF  b_gsc_object.security_object_obj = 0 THEN
  DO:
    FIND gsc_object_type WHERE gsc_object_type.object_type_code  = "SmartToolbar":U NO-LOCK NO-ERROR.
    IF AVAILABLE gsc_object_type THEN
    DO:
       IF b_gsc_object.object_type_obj = gsc_object_type.object_type_obj THEN
         ASSIGN b_gsc_object.security_object_obj = b_gsc_object.object_obj.
    END.
  END.

  ERROR-STATUS:ERROR = NO.
  RETURN cMessageList.
  

END PROCEDURE.

/* _UIB-CODE-BLOCK-END */
&ANALYZE-RESUME

{&DB-REQUIRED-END}

