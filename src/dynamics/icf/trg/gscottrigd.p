/*********************************************************************
* Copyright (C) 2000 by Progress Software Corporation ("PSC"),       *
* 14 Oak Park, Bedford, MA 01730, and other contributors as listed   *
* below.  All Rights Reserved.                                       *
*                                                                    *
* The Initial Developer of the Original Code is PSC.  The Original   *
* Code is Progress IDE code released to open source December 1, 2000.*
*                                                                    *
* The contents of this file are subject to the Possenet Public       *
* License Version 1.0 (the "License"); you may not use this file     *
* except in compliance with the License.  A copy of the License is   *
* available as of the date of this notice at                         *
* http://www.possenet.org/license.html                               *
*                                                                    *
* Software distributed under the License is distributed on an "AS IS"*
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. You*
* should refer to the License for the specific language governing    *
* rights and limitations under the License.                          *
*                                                                    *
* Contributors: MIP Holdings (Pty) Ltd ("MIP")                       *
*               PSC                                                  *
*                                                                    *
*********************************************************************/

TRIGGER PROCEDURE FOR DELETE OF gsc_object_type .

/* Created automatically using ERwin ICF Trigger template db/af/erw/afercustrg.i
   Do not change manually. Customisations to triggers should be placed in separate
   include files pulled into the trigger. ICF auto generates write trigger custom
   include files. Delete or create customisation include files need to be created
   manually. Be sure to put the hook in ERwin directly so as not to have you changes
   overwritten.
   User defined Macro (UDP) Summary (case sensitive)
   gsc_object_type           Expands to full table name, e.g. gsm_user
   %TableFLA            Expands to table unique code, e.g. gsmus
   %TableObj            If blank or not defined expands to table_obj with no prefix (framework standard)
                        If defined, uses this field as the object field
                        If set to "none" then indicates table does not have an object field
   XYZ                  Do not define so we can compare against an empty string

   See docs for explanation of replication macros 
*/   

&SCOPED-DEFINE TRIGGER_TABLE gsc_object_type
&SCOPED-DEFINE TRIGGER_FLA gscot
&SCOPED-DEFINE TRIGGER_OBJ object_type_obj


DEFINE BUFFER lb_table FOR gsc_object_type.      /* Used for recursive relationships */
DEFINE BUFFER lb1_table FOR gsc_object_type.     /* Used for lock upgrades */

DEFINE BUFFER o_gsc_object_type FOR gsc_object_type.

/* Standard top of DELETE trigger code */
{af/sup/aftrigtopd.i}

  




/* Generated by ICF ERwin Template */
/* gsc_object_type is extended by gsc_object_type ON PARENT DELETE RESTRICT */

IF CAN-FIND(FIRST lb_table WHERE
    lb_table.extends_object_type_obj = gsc_object_type.object_type_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_object_type|gsc_object_type":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.


/* Generated by ICF ERwin Template */
/* gsc_object_type has ryc_ui_event ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_ui_event) = 0 &THEN
  DEFINE BUFFER lbe_ui_event FOR ryc_ui_event.
  &GLOBAL-DEFINE lbe_ui_event yes
&ENDIF
FOR EACH ryc_ui_event NO-LOCK
   WHERE ryc_ui_event.object_type_obj = gsc_object_type.object_type_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscottrigd.p^delete ryc_ui_event":U:
    FIND FIRST lbe_ui_event EXCLUSIVE-LOCK
         WHERE ROWID(lbe_ui_event) = ROWID(ryc_ui_event)
         NO-ERROR.
    IF AVAILABLE lbe_ui_event THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_ui_event"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsc_object_type supports ryc_supported_link ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST ryc_supported_link WHERE
    ryc_supported_link.object_type_obj = gsc_object_type.object_type_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_object_type|ryc_supported_link":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.



/* Generated by ICF ERwin Template */
/* gsc_object_type has ryc_attribute_value ON PARENT DELETE CASCADE */
&IF DEFINED(lbe_attribute_value) = 0 &THEN
  DEFINE BUFFER lbe_attribute_value FOR ryc_attribute_value.
  &GLOBAL-DEFINE lbe_attribute_value yes
&ENDIF
FOR EACH ryc_attribute_value NO-LOCK
   WHERE ryc_attribute_value.object_type_obj = gsc_object_type.object_type_obj
   ON STOP UNDO, RETURN ERROR "AF^104^gscottrigd.p^delete ryc_attribute_value":U:
    FIND FIRST lbe_attribute_value EXCLUSIVE-LOCK
         WHERE ROWID(lbe_attribute_value) = ROWID(ryc_attribute_value)
         NO-ERROR.
    IF AVAILABLE lbe_attribute_value THEN
      DO:
        {af/sup/afvalidtrg.i &action = "DELETE" &table = "lbe_attribute_value"}
      END.
END.





/* Generated by ICF ERwin Template */
/* gsc_object_type defines ryc_smartobject ON PARENT DELETE RESTRICT */
IF CAN-FIND(FIRST ryc_smartobject WHERE
    ryc_smartobject.object_type_obj = gsc_object_type.object_type_obj) THEN
    DO:
      /* Cannot delete parent because child exists! */
      ASSIGN lv-error = YES lv-errgrp = "AF ":U lv-errnum = 101 lv-include = "gsc_object_type|ryc_smartobject":U.
      RUN error-message (lv-errgrp, lv-errnum, lv-include).
    END.





/* Generic comments deletion */
DEFINE BUFFER lbx_gsm_comment FOR gsm_comment.
DEFINE BUFFER lby_gsm_comment FOR gsm_comment.
IF CAN-FIND(FIRST lbx_gsm_comment 
            WHERE lbx_gsm_comment.owning_obj = gsc_object_type.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_comment NO-LOCK
       WHERE lbx_gsm_comment.owning_obj = gsc_object_type.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^gscottrigd.p^delete gsm_comment":U:
        FIND FIRST lby_gsm_comment EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_comment) = ROWID(lbx_gsm_comment)
             NO-ERROR.
        IF AVAILABLE lby_gsm_comment THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_comment"}
          END.
    END.
/* Generic security allocation deletion */
DEFINE BUFFER lbx_gsm_user_allocation FOR gsm_user_allocation.
DEFINE BUFFER lby_gsm_user_allocation FOR gsm_user_allocation.
IF CAN-FIND(FIRST lbx_gsm_user_allocation 
            WHERE lbx_gsm_user_allocation.owning_obj = gsc_object_type.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_user_allocation NO-LOCK
       WHERE lbx_gsm_user_allocation.owning_obj = gsc_object_type.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^gscottrigd.p^delete gsm_user_allocation":U:
        FIND FIRST lby_gsm_user_allocation EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_user_allocation) = ROWID(lbx_gsm_user_allocation)
             NO-ERROR.
        IF AVAILABLE lby_gsm_user_allocation THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_user_allocation"}
          END.
    END.
/* Generic multi-media deletion */
DEFINE BUFFER lbx_gsm_multi_media FOR gsm_multi_media.
DEFINE BUFFER lby_gsm_multi_media FOR gsm_multi_media.
IF CAN-FIND(FIRST lbx_gsm_multi_media 
            WHERE lbx_gsm_multi_media.owning_obj = gsc_object_type.{&TRIGGER_OBJ}) THEN
    FOR EACH lbx_gsm_multi_media NO-LOCK
       WHERE lbx_gsm_multi_media.owning_obj = gsc_object_type.{&TRIGGER_OBJ}
       ON STOP UNDO, RETURN ERROR "AF^104^gscottrigd.p^delete gsm_multi_media":U:
        FIND FIRST lby_gsm_multi_media EXCLUSIVE-LOCK
             WHERE ROWID(lby_gsm_multi_media) = ROWID(lbx_gsm_multi_media)
             NO-ERROR.
        IF AVAILABLE lby_gsm_multi_media THEN
          DO:
            {af/sup/afvalidtrg.i &action = "DELETE" &table = "lby_gsm_multi_media"}
          END.
    END.










/* Update Audit Log */
IF CAN-FIND(FIRST gsc_entity_mnemonic
            WHERE gsc_entity_mnemonic.entity_mnemonic = 'gscot':U
              AND gsc_entity_mnemonic.auditing_enabled = YES) THEN
  RUN af/app/afauditlgp.p (INPUT "DELETE":U, INPUT "gscot":U, INPUT BUFFER gsc_object_type:HANDLE, INPUT BUFFER o_gsc_object_type:HANDLE).

/* Standard bottom of DELETE trigger code */
{af/sup/aftrigendd.i}


/* Place any specific DELETE trigger customisations here */
